services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: shopping-mysql
    env_file:
      - ./backend/.env
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "shop_user", "-pshop_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user-service
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=mysql
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - shopping-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: product-service
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=mysql
    ports:
      - "8081:8081"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - shopping-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile
    container_name: order-service
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=mysql
    ports:
      - "8082:8082"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - shopping-network
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=mysql
    ports:
      - "8083:8083"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - shopping-network
    restart: unless-stopped

  # Cart Service
  cart-service:
    build:
      context: ./backend/cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=mysql
    ports:
      - "8084:8084"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - shopping-network
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  shopping-network:
    driver: bridge
