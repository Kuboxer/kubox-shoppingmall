name: Backend MSA Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Detect services to build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ALL_SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          # ECR에 이미지가 하나라도 있는지 확인
          TOTAL_IMAGES=$(aws ecr describe-images \
            --repository-name kubox \
            --query "length(imageDetails)" \
            --output text 2>/dev/null || echo "0")
          
          echo "Total images in ECR: $TOTAL_IMAGES"
          
          if [ "$TOTAL_IMAGES" = "0" ]; then
            echo "🆕 No images found in ECR. Building ALL services for first time."
            BUILD_SERVICES="${ALL_SERVICES[@]}"
          else
            echo "📋 Images exist. Checking for changed services only."
            
            # 변경된 파일 확인
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # 변경된 서비스 찾기
            for SERVICE in "${ALL_SERVICES[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "backend/$SERVICE/"; then
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              fi
            done
            
            BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          fi
          
          if [ -z "$BUILD_SERVICES" ]; then
            echo "No services to build. Exiting."
            exit 0
          fi
          
          echo "Services to build: $BUILD_SERVICES"
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_ENV
          
      - name: Build services
        if: env.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # 고유성을 위한 타임스탬프 (내부 빌드용)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BUILD_NUMBER="${{ github.run_number }}"
          
          # 빌드된 서비스와 버전을 저장할 배열
          BUILT_SERVICES=""
          
          for SERVICE in ${{ env.build_services }}; do
            echo "=== Processing $SERVICE ==="
            
            # 현재 서비스의 기존 버전 확인
            echo "Checking existing versions for $SERVICE..."
            EXISTING_VERSIONS=$(aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null | \
              tr '\t' '\n' | \
              grep "^${SERVICE}-v[0-9]*$" | \
              sed "s/${SERVICE}-v//" | \
              sort -n || echo "")
            
            if [ -z "$EXISTING_VERSIONS" ]; then
              NEXT_VERSION=1
              echo "🆕 No existing versions found. Creating first version: v1"
            else
              echo "📋 Existing versions: $(echo $EXISTING_VERSIONS | tr '\n' ' ')"
              LATEST_VERSION=$(echo "$EXISTING_VERSIONS" | tail -1)
              NEXT_VERSION=$((LATEST_VERSION + 1))
              echo "📈 Latest version: v$LATEST_VERSION -> Next version: v$NEXT_VERSION"
            fi
            
            # 최종 태그들
            VERSION_TAG="${SERVICE}-v${NEXT_VERSION}"
            LATEST_TAG="${SERVICE}-latest"
            
            # 임시 고유 태그 (충돌 방지용)
            TEMP_TAG="${SERVICE}-temp-${TIMESTAMP}-${BUILD_NUMBER}"
            
            VERSION_URI="$ECR_REGISTRY/kubox:$VERSION_TAG"
            LATEST_URI="$ECR_REGISTRY/kubox:$LATEST_TAG"
            
            echo "🏗️  Building $SERVICE as $VERSION_TAG"
            
            # 도커 빌드 (VERSION 인자 전달)
            cd backend/$SERVICE
            
            if docker build --build-arg VERSION="$VERSION_TAG" -t "$TEMP_TAG" .; then
              echo "✅ Build successful"
              
              # 버전 태그 적용 및 푸시
              docker tag "$TEMP_TAG" "$VERSION_URI"
              if docker push "$VERSION_URI"; then
                echo "✅ Successfully pushed $VERSION_TAG"
                
                # latest 태그 적용 및 푸시
                docker tag "$TEMP_TAG" "$LATEST_URI"
                docker push "$LATEST_URI"
                echo "✅ Updated $LATEST_TAG tag"
                
                # 빌드 성공한 서비스 기록
                BUILT_SERVICES="$BUILT_SERVICES $SERVICE:$VERSION_TAG"
                
                # 결과 확인
                echo "🎯 $SERVICE is now available as:"
                echo "   📦 $VERSION_TAG"
                echo "   🏷️  $LATEST_TAG"
                
              else
                echo "❌ Failed to push $VERSION_TAG"
              fi
              
              # 임시 태그 정리
              docker rmi "$TEMP_TAG" 2>/dev/null || true
              
            else
              echo "❌ Build failed for $SERVICE"
            fi
            
            cd ../..
            echo "---"
          done

          # 빌드 결과를 환경변수로 저장
          echo "built_services=$BUILT_SERVICES" >> $GITHUB_ENV
          
      - name: Update Helm Chart
        if: env.built_services != ''
        run: |
          echo "🔄 Updating Helm Chart with new image tags..."
          
          # Helm Chart 저장소 클론
          git clone https://github.com/Kuboxer/kubox-helm-chart.git helm-repo
          cd helm-repo
          
          # Git 설정
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 빌드된 각 서비스의 태그 업데이트
          for SERVICE_TAG in ${{ env.built_services }}; do
            SERVICE=$(echo $SERVICE_TAG | cut -d':' -f1)
            TAG=$(echo $SERVICE_TAG | cut -d':' -f2)
            
            echo "📝 Updating $SERVICE to $TAG"
            
            # values.yaml에서 해당 서비스의 태그 업데이트
            case $SERVICE in
              "user-service")
                sed -i "s/tag: user-service-v.*/tag: $TAG/" values.yaml
                ;;
              "product-service")
                sed -i "s/tag: product-service-v.*/tag: $TAG/" values.yaml
                ;;
              "cart-service")
                sed -i "s/tag: cart-service-v.*/tag: $TAG/" values.yaml
                ;;
              "order-service")
                sed -i "s/tag: order-service-v.*/tag: $TAG/" values.yaml
                ;;
              "payment-service")
                sed -i "s/tag: payment-service-v.*/tag: $TAG/" values.yaml
                ;;
            esac
          done
          
          # 변경사항 확인
          echo "📋 Changes made:"
          git diff
          
          # 변경사항이 있으면 커밋 & 푸시
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update image tags: ${{ env.built_services }}"
            git push https://${{ secrets.HELM_REPO_TOKEN }}@github.com/Kuboxer/kubox-helm-chart.git main
            echo "✅ Helm chart updated successfully"
          else
            echo "ℹ️  No changes to commit"
          fi
          
      - name: Summary
        run: |
          echo ""
          echo "🎉 Deployment Summary:"
          echo "✅ Built services: ${{ env.build_services }}"
          echo "📦 Updated images: ${{ env.built_services }}"
          echo "📋 Build logic:"
          echo "   - No images in ECR: Build ALL services as v1"
          echo "   - Images exist: Build only CHANGED services"
          echo "   - Latest tag always points to newest version"
          echo "   - Helm chart automatically updated"
