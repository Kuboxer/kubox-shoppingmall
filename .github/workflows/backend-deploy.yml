name: Backend MSA Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Detect changed services and build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Î≥ÄÍ≤ΩÎêú ÌååÏùº ÌôïÏù∏
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Î≥ÄÍ≤ΩÎêú ÏÑúÎπÑÏä§ Ï∞æÍ∏∞
          CHANGED_SERVICES=""
          
          if echo "$CHANGED_FILES" | grep -q "backend/user-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES user-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/product-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES product-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/order-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES order-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/payment-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES payment-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/cart-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES cart-service"
          fi
          
          CHANGED_SERVICES=$(echo $CHANGED_SERVICES | xargs)
          
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No service changes detected. Skipping build."
            exit 0
          fi
          
          echo "Changed services: $CHANGED_SERVICES"
          
          # Í≥†Ïú†ÏÑ±ÏùÑ ÏúÑÌïú ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ (ÎÇ¥Î∂Ä ÎπåÎìúÏö©)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BUILD_NUMBER="${{ github.run_number }}"
          
          for SERVICE in $CHANGED_SERVICES; do
            echo "=== Processing $SERVICE ==="
            
            # ÌòÑÏû¨ ÏÑúÎπÑÏä§Ïùò Î≤ÑÏ†Ñ ÌÉúÍ∑∏Îì§ Ï°∞Ìöå
            SIMPLE_VERSIONS=$(aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null | \
              tr '\t' '\n' | \
              grep "^${SERVICE}-v[0-9]*$" | \
              sed "s/${SERVICE}-v//" | \
              sort -n || echo "")
            
            if [ -z "$SIMPLE_VERSIONS" ]; then
              NEXT_VERSION=1
            else
              LATEST_VERSION=$(echo "$SIMPLE_VERSIONS" | tail -1)
              NEXT_VERSION=$((LATEST_VERSION + 1))
            fi
            
            # ÏµúÏ¢Ö ÌÉúÍ∑∏Îì§ (ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÌÉúÍ∑∏ Ï†úÍ±∞)
            VERSION_TAG="${SERVICE}-v${NEXT_VERSION}"
            LATEST_TAG="${SERVICE}-latest"
            
            # ÏûÑÏãú Í≥†Ïú† ÌÉúÍ∑∏ (Ï∂©Îèå Î∞©ÏßÄÏö©, ECRÏóê Ìë∏ÏãúÌïòÏßÄ ÏïäÏùå)
            TEMP_TAG="${SERVICE}-temp-${TIMESTAMP}-${BUILD_NUMBER}"
            
            VERSION_URI="$ECR_REGISTRY/kubox:$VERSION_TAG"
            LATEST_URI="$ECR_REGISTRY/kubox:$LATEST_TAG"
            
            echo "Building version: $VERSION_TAG"
            
            # ÎèÑÏª§ ÎπåÎìú
            cd backend/$SERVICE
            
            if docker build -t "$TEMP_TAG" .; then
              echo "‚úÖ Build successful"
              
              # Î≤ÑÏ†Ñ ÌÉúÍ∑∏ Ï†ÅÏö© Î∞è Ìë∏Ïãú
              docker tag "$TEMP_TAG" "$VERSION_URI"
              if docker push "$VERSION_URI"; then
                echo "‚úÖ Successfully pushed $VERSION_TAG"
                
                # latest ÌÉúÍ∑∏ Ï†ÅÏö© Î∞è Ìë∏Ïãú
                docker tag "$TEMP_TAG" "$LATEST_URI"
                docker push "$LATEST_URI"
                echo "‚úÖ Updated latest tag"
                
              else
                echo "‚ùå Failed to push $VERSION_TAG"
              fi
              
              # ÏûÑÏãú ÌÉúÍ∑∏ Ï†ïÎ¶¨
              docker rmi "$TEMP_TAG" 2>/dev/null || true
              
            else
              echo "‚ùå Build failed for $SERVICE"
            fi
            
            cd ../..
            echo "‚úÖ Completed $SERVICE: $VERSION_TAG"
            echo "---"
          done
          
      - name: Show final state
        run: |
          echo "üéâ Build completed!"
          echo "Clean tags: service-v1, service-v2, service-latest"
