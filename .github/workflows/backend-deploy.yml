name: Build and Push Backend Services

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force build all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 가져오기
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Check changed services
        id: changes
        run: |
          echo "🔍 변경된 서비스 확인 중..."
          
          # 서비스 목록
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          CHANGED_SERVICES=""
          
          # 수동 실행시 모든 서비스 빌드 강제
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드 - 모든 서비스 빌드"
            CHANGED_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            # 이전 커밋과 비교 (푸시 이벤트일 때)
            if [ "${{ github.event_name }}" = "push" ]; then
              # 푸시된 커밋들 확인
              PREV_COMMIT="${{ github.event.before }}"
              CURR_COMMIT="${{ github.sha }}"
              
              echo "📊 비교: $PREV_COMMIT...$CURR_COMMIT"
              
              # 각 서비스별 변경사항 확인
              for SERVICE in "${SERVICES[@]}"; do
                CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
                
                if [ -n "$CHANGED_FILES" ]; then
                  echo "📝 $SERVICE 변경됨:"
                  echo "$CHANGED_FILES" | sed 's/^/  - /'
                  CHANGED_SERVICES="$CHANGED_SERVICES $SERVICE"
                else
                  echo "⏭️  $SERVICE 변경사항 없음"
                fi
              done
            fi
          fi
          
          # 공백 제거
          CHANGED_SERVICES=$(echo $CHANGED_SERVICES | xargs)
          
          echo "changed_services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
          echo "✅ 최종 변경된 서비스: [$CHANGED_SERVICES]"
          
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "ℹ️  변경된 서비스가 없습니다."
          fi
        
      - name: Determine versions for changed services
        id: version
        if: steps.changes.outputs.changed_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          CHANGED_SERVICES: ${{ steps.changes.outputs.changed_services }}
        run: |
          # 서비스 매핑
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🔍 변경된 서비스들의 버전 확인: [$CHANGED_SERVICES]"
          
          for SERVICE_DIR in $CHANGED_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE_DIR]}"
            
            echo "🔍 $SERVICE_TAG 기존 버전 확인..."
            
            # ECR에서 기존 태그 확인
            EXISTING_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            echo "📎 기존 태그: $EXISTING_TAGS"
            
            # 최고 버전 찾기
            MAX_VERSION=0
            if [[ -n "$EXISTING_TAGS" ]]; then
              for TAG in $EXISTING_TAGS; do
                if [[ $TAG =~ ^$SERVICE_TAG-v([0-9]+)$ ]]; then
                  VERSION_NUM=${BASH_REMATCH[1]}
                  if (( VERSION_NUM > MAX_VERSION )); then
                    MAX_VERSION=$VERSION_NUM
                  fi
                fi
              done
            fi
            
            # 다음 버전 계산
            NEXT_VERSION=$((MAX_VERSION + 1))
            
            echo "📦 $SERVICE_TAG: v$MAX_VERSION → v$NEXT_VERSION"
            echo "${SERVICE_TAG}_VERSION=v$NEXT_VERSION" >> $GITHUB_OUTPUT
          done
        
      - name: Build and push only changed services
        if: steps.changes.outputs.changed_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          CHANGED_SERVICES: ${{ steps.changes.outputs.changed_services }}
          USER_VERSION: ${{ steps.version.outputs.user_VERSION }}
          PROD_VERSION: ${{ steps.version.outputs.prod_VERSION }}
          ORDER_VERSION: ${{ steps.version.outputs.order_VERSION }}
          PAY_VERSION: ${{ steps.version.outputs.pay_VERSION }}
          CART_VERSION: ${{ steps.version.outputs.cart_VERSION }}
        run: |
          # 서비스 매핑
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          declare -A VERSIONS
          VERSIONS["user"]="$USER_VERSION"
          VERSIONS["prod"]="$PROD_VERSION"
          VERSIONS["order"]="$ORDER_VERSION"
          VERSIONS["pay"]="$PAY_VERSION"
          VERSIONS["cart"]="$CART_VERSION"
          
          echo "🚀 변경된 서비스만 빌드: [$CHANGED_SERVICES]"
          
          BUILT_COUNT=0
          for SERVICE_DIR in $CHANGED_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE_DIR]}"
            VERSION="${VERSIONS[$SERVICE_TAG]}"
            CONTEXT="backend/$SERVICE_DIR"
            
            # 버전별 이미지 태그 
            VERSIONED_IMAGE="$ECR_REGISTRY/kubox:$SERVICE_TAG-$VERSION"
            LATEST_IMAGE="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
            
            echo "🔨 Building $SERVICE_DIR only (실제 코드 변경됨)"
            echo "   📦 Version: $VERSIONED_IMAGE"
            echo "   🏷️  Latest: $LATEST_IMAGE"
            
            # Docker 이미지 빌드
            docker build -t $VERSIONED_IMAGE $CONTEXT
            docker push $VERSIONED_IMAGE
            
            # latest 태그
            docker tag $VERSIONED_IMAGE $LATEST_IMAGE
            docker push $LATEST_IMAGE
            
            echo "✅ $SERVICE_DIR → $SERVICE_TAG-$VERSION 완료"
            BUILT_COUNT=$((BUILT_COUNT + 1))
          done
          
          echo "🎉 총 $BUILT_COUNT 개 서비스 빌드 완료!"
          
      - name: No changes detected  
        if: steps.changes.outputs.changed_services == ''
        run: |
          echo "ℹ️  변경된 백엔드 서비스가 없습니다."
          echo "💡 불필요한 이미지 빌드를 건너뜁니다."
          echo "🔧 특정 서비스만 빌드하려면 해당 서비스 코드를 수정하세요."
