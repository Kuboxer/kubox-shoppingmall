name: Force Unique Image Per Version

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes
        id: analyze
        run: |
          echo "🔍 변경 분석..."
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            for SERVICE in "${SERVICES[@]}"; do
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 변경됨"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⏭️  $SERVICE: 변경 없음"
              fi
            done
          fi
          
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "최종 빌드 대상: [$BUILD_SERVICES]"
        
      - name: Build with guaranteed unique images
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          # 빌드 고유성을 위한 타임스탬프
          BUILD_TIME=$(date +%Y%m%d_%H%M%S)
          BUILD_ID=$(echo ${{ github.sha }} | cut -c1-8)
          
          echo "🚀 고유 이미지 빌드 시작..."
          echo "빌드 ID: $BUILD_ID"
          echo "빌드 시간: $BUILD_TIME"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "🔨 처리 중: $SERVICE → $SERVICE_TAG"
            
            # 기존 버전 확인
            echo "📋 기존 버전 확인..."
            ALL_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            EXISTING_VERSIONS=$(echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-v[0-9]*$" | sed "s/$SERVICE_TAG-v//" | sort -n || echo "")
            
            if [ -z "$EXISTING_VERSIONS" ]; then
              NEXT_VERSION=1
              echo "첫 번째 버전: v1"
            else
              MAX_VERSION=$(echo "$EXISTING_VERSIONS" | tail -1)
              NEXT_VERSION=$((MAX_VERSION + 1))
              echo "기존 버전들: $(echo $EXISTING_VERSIONS | tr '\n' ' ')"
              echo "새 버전: v$NEXT_VERSION"
            fi
            
            # 임시 빌드 디렉토리 생성
            TEMP_BUILD_DIR="temp_build_${SERVICE_TAG}_${BUILD_TIME}"
            mkdir -p "$TEMP_BUILD_DIR"
            
            # 소스 코드 복사
            cp -r "backend/$SERVICE/"* "$TEMP_BUILD_DIR/"
            
            # 고유성을 보장하는 메타데이터 파일 추가
            cat > "$TEMP_BUILD_DIR/BUILD_INFO" << BUILDINFO_EOF
          BUILD_TIME=$BUILD_TIME
          BUILD_ID=$BUILD_ID
          VERSION=v$NEXT_VERSION
          SERVICE=$SERVICE_TAG
          GITHUB_SHA=${{ github.sha }}
          GITHUB_RUN_ID=${{ github.run_id }}
          GITHUB_RUN_NUMBER=${{ github.run_number }}
          BUILDINFO_EOF
            
            # Dockerfile에 메타데이터 추가하는 임시 Dockerfile 생성
            cat > "$TEMP_BUILD_DIR/Dockerfile.versioned" << DOCKERFILE_EOF
          # 기존 Dockerfile 내용을 그대로 가져오기
          FROM openjdk:17-jdk-slim
          
          # 작업 디렉토리 설정
          WORKDIR /app
          
          # Gradle 래퍼와 설정 파일들 복사
          COPY gradle/ gradle/
          COPY gradlew .
          COPY build.gradle .
          COPY settings.gradle .
          
          # 소스 코드 복사
          COPY src/ src/
          
          # 빌드 정보 추가 (이미지 고유성 보장)
          COPY BUILD_INFO /app/BUILD_INFO
          
          # Gradle 래퍼에 실행 권한 부여
          RUN chmod +x ./gradlew
          
          # 애플리케이션 빌드
          RUN ./gradlew build -x test
          
          # 빌드된 JAR 파일을 app.jar로 복사 (실행 가능한 JAR만)
          RUN find build/libs -name '*.jar' ! -name '*plain*' -exec cp {} app.jar \;
          
          # 포트 노출
          EXPOSE 8080
          
          # 애플리케이션 실행
          ENTRYPOINT ["java", "-jar", "app.jar"]
          DOCKERFILE_EOF
            
            # 새 버전 이미지 빌드 (고유성 보장됨)
            NEW_VERSION_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            
            echo "🏗️  고유 이미지 빌드: $SERVICE_TAG-v$NEXT_VERSION"
            
            if docker build -f "$TEMP_BUILD_DIR/Dockerfile.versioned" -t "$NEW_VERSION_TAG" "$TEMP_BUILD_DIR"; then
              echo "✅ v$NEXT_VERSION 빌드 성공"
            else
              echo "❌ 빌드 실패"
              rm -rf "$TEMP_BUILD_DIR"
              exit 1
            fi
            
            # 새 버전 푸시
            echo "📤 새 버전 푸시..."
            if docker push "$NEW_VERSION_TAG"; then
              echo "✅ $SERVICE_TAG-v$NEXT_VERSION 푸시 성공"
            else
              echo "❌ 푸시 실패"
              rm -rf "$TEMP_BUILD_DIR"
              exit 1
            fi
            
            # latest 태그 처리
            echo "🏷️  latest 태그 업데이트..."
            NEW_LATEST_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
            docker tag "$NEW_VERSION_TAG" "$NEW_LATEST_TAG"
            
            if docker push "$NEW_LATEST_TAG"; then
              echo "✅ latest 태그 업데이트 완료"
            else
              echo "❌ latest 태그 업데이트 실패"
              rm -rf "$TEMP_BUILD_DIR"
              exit 1
            fi
            
            # 임시 디렉토리 정리
            rm -rf "$TEMP_BUILD_DIR"
            
            echo "🎉 $SERVICE 완료: $SERVICE_TAG-v$NEXT_VERSION (고유 이미지)"
            
            # 이미지 정보 확인
            echo "🔍 생성된 이미지 정보:"
            docker image inspect "$NEW_VERSION_TAG" --format='{{.Id}}' | head -c 20
            echo "..."
          done
          
      - name: Verify all versions exist
        if: steps.analyze.outputs.build_services != ''
        env:
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          echo ""
          echo "🔍 모든 버전 존재 확인..."
          
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "📊 $SERVICE_TAG 전체 버전 목록:"
            
            # 모든 버전 이미지 나열
            aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].{Tags:imageTags,Size:imageSizeInBytes,Pushed:imagePushedAt}" \
              --output table
            
            echo ""
            echo "🏷️  latest 태그 상태:"
            aws ecr describe-images \
              --repository-name kubox \
              --image-ids imageTag="$SERVICE_TAG-latest" \
              --query "imageDetails[0].{Tags:imageTags,Digest:imageDigest}" \
              --output table 2>/dev/null || echo "latest 태그 없음"
          done
          
      - name: Summary
        run: |
          echo ""
          echo "🎯 고유 이미지 빌드 완료!"
          echo "📈 빌드된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo ""
          echo "✅ 각 버전은 완전히 독립적인 고유 이미지입니다"
          echo "✅ 빌드 정보가 포함되어 이미지 중복이 불가능합니다"
          echo "✅ 모든 기존 버전이 보존됩니다"
          echo "✅ ECR에서 user-v1, user-v2, user-v3... 모든 버전 확인 가능"
