name: True Incremental Versioning

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes
        id: analyze
        run: |
          echo "🔍 변경 분석..."
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            for SERVICE in "${SERVICES[@]}"; do
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 변경됨"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⏭️  $SERVICE: 변경 없음"
              fi
            done
          fi
          
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "최종 빌드 대상: [$BUILD_SERVICES]"
        
      - name: Build truly unique images
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🚀 진짜 고유 이미지 빌드 시작..."
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "🔨 처리 중: $SERVICE → $SERVICE_TAG"
            
            # 기존 최고 버전 확인
            echo "📋 기존 버전 확인..."
            ALL_TAGS=$(aws ecr list-images --repository-name kubox --query "imageDetails[].imageTags[]" --output text 2>/dev/null || echo "")
            
            # 기존 버전 숫자들 추출
            VERSIONS=$(echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-v[0-9]*$" | sed "s/$SERVICE_TAG-v//" | sort -n)
            
            if [ -z "$VERSIONS" ]; then
              NEXT_VERSION=1
              echo "첫 번째 버전: v1"
            else
              MAX_VERSION=$(echo "$VERSIONS" | tail -1)
              NEXT_VERSION=$((MAX_VERSION + 1))
              echo "기존 버전들: $(echo $VERSIONS | tr '\n' ' ')"
              echo "새 버전: v$NEXT_VERSION"
            fi
            
            # 각 빌드마다 고유한 파일 생성 (이미지 Digest 변경 보장)
            UNIQUE_ID="${{ github.run_number }}-$(date +%s)-$RANDOM"
            echo "고유 빌드 ID: $UNIQUE_ID"
            
            # 1. 고유 파일을 소스에 추가
            mkdir -p backend/$SERVICE/src/main/resources/static
            cat > backend/$SERVICE/src/main/resources/static/build-info.json << EOF
          {
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "buildNumber": "${{ github.run_number }}",
            "commitSha": "${{ github.sha }}",
            "version": "v$NEXT_VERSION",
            "service": "$SERVICE_TAG",
            "uniqueId": "$UNIQUE_ID",
            "runId": "${{ github.run_id }}"
          }
          EOF
            
            # 2. Dockerfile에 고유성 레이어 추가
            cat >> backend/$SERVICE/Dockerfile << EOF
          
          # === 고유성 보장 레이어 ===
          COPY src/main/resources/static/build-info.json /app/build-info.json
          RUN echo "Build ID: $UNIQUE_ID" > /app/unique-build-marker.txt
          RUN echo "Timestamp: $(date)" >> /app/unique-build-marker.txt
          EOF
            
            # 3. 새 버전으로 빌드
            VERSION_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            
            echo "🏗️  빌드 시작: $SERVICE_TAG-v$NEXT_VERSION"
            echo "고유 식별자: $UNIQUE_ID"
            
            if docker build -t "$VERSION_TAG" backend/$SERVICE/; then
              echo "✅ 빌드 성공"
              
              # 이미지 Digest 확인
              IMAGE_DIGEST=$(docker image inspect "$VERSION_TAG" --format='{{.Id}}')
              echo "🔍 이미지 Digest: ${IMAGE_DIGEST:7:12}..."
              
              # 4. 버전 태그 푸시
              if docker push "$VERSION_TAG"; then
                echo "✅ $SERVICE_TAG-v$NEXT_VERSION 푸시 성공"
                
                # 5. latest 태그 처리 (기존 latest는 자동으로 이동됨)
                LATEST_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
                docker tag "$VERSION_TAG" "$LATEST_TAG"
                
                if docker push "$LATEST_TAG"; then
                  echo "✅ $SERVICE_TAG-latest 업데이트 완료"
                else
                  echo "❌ latest 태그 푸시 실패"
                fi
              else
                echo "❌ 버전 태그 푸시 실패"
              fi
            else
              echo "❌ 빌드 실패"
            fi
            
            # 6. 임시 파일들 원복
            rm -f backend/$SERVICE/src/main/resources/static/build-info.json
            
            # Dockerfile 원복 (마지막 3줄 제거)
            head -n -4 backend/$SERVICE/Dockerfile > backend/$SERVICE/Dockerfile.tmp
            mv backend/$SERVICE/Dockerfile.tmp backend/$SERVICE/Dockerfile
            
            echo "🎉 $SERVICE_TAG-v$NEXT_VERSION 완료 (고유 이미지)"
          done
          
      - name: Verify incremental versions
        if: steps.analyze.outputs.build_services != ''
        env:
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          echo ""
          echo "🔍 증분 버전 검증..."
          
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "📊 $SERVICE_TAG 모든 버전:"
            
            # 모든 버전 이미지를 Digest와 함께 확인
            aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].{Tags:imageTags,Digest:imageDigest,Size:imageSizeInBytes,Pushed:imagePushedAt}" \
              --output table
            
            echo ""
            echo "🏷️  $SERVICE_TAG latest 상태:"
            aws ecr describe-images \
              --repository-name kubox \
              --image-ids imageTag="$SERVICE_TAG-latest" \
              --query "imageDetails[0].{Tags:imageTags,Digest:imageDigest}" \
              --output table 2>/dev/null || echo "latest 태그 없음"
          done
          
      - name: Final Summary
        run: |
          echo ""
          echo "🎯 진짜 증분 버전 빌드 완료!"
          echo "📈 빌드된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo ""
          echo "✅ 각 버전은 고유한 Digest를 가진 별개 이미지입니다"
          echo "✅ 기존 버전들이 절대 사라지지 않습니다"
          echo "✅ v1, v2, v3... 순차적으로 증가합니다"
          echo "✅ latest는 항상 최신 버전을 가리킵니다"
          echo ""
          echo "🔍 ECR에서 확인하면 다음과 같이 나타납니다:"
          echo "  📦 user-v1 (sha256:abc123...)"
          echo "  📦 user-v2 (sha256:def456...)"
          echo "  📦 user-v3 (sha256:ghi789...)"
          echo "  🏷️  user-latest → user-v3"
