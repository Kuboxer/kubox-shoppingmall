name: Final Fix - Proper Incremental Versioning

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes
        id: analyze
        run: |
          echo "🔍 변경 분석..."
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            for SERVICE in "${SERVICES[@]}"; do
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 변경됨"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⏭️  $SERVICE: 변경 없음"
              fi
            done
          fi
          
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "최종 빌드 대상: [$BUILD_SERVICES]"
        
      - name: Build with proper version increment
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🚀 올바른 증분 버전 빌드..."
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "🔨 처리 중: $SERVICE → $SERVICE_TAG"
            
            # === 1. 정확한 기존 버전 확인 ===
            echo "📋 ECR에서 기존 버전 조회..."
            
            # ECR API로 정확한 태그 목록 가져오기
            EXISTING_IMAGES=$(aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output json 2>/dev/null || echo "[]")
            
            # jq를 사용해서 정확한 버전 파싱
            CURRENT_VERSIONS=$(echo "$EXISTING_IMAGES" | jq -r '.[]' | grep "^$SERVICE_TAG-v[0-9]*$" | sed "s/$SERVICE_TAG-v//" | sort -n || echo "")
            
            if [ -z "$CURRENT_VERSIONS" ]; then
              NEXT_VERSION=1
              echo "🆕 첫 번째 버전: v1"
            else
              # 가장 높은 버전 번호 찾기
              MAX_VERSION=$(echo "$CURRENT_VERSIONS" | tail -1)
              NEXT_VERSION=$((MAX_VERSION + 1))
              echo "📈 기존 최고 버전: v$MAX_VERSION"
              echo "🆕 새 버전: v$NEXT_VERSION"
              echo "📦 기존 버전들: $(echo $CURRENT_VERSIONS | tr '\n' ', ')"
            fi
            
            # === 2. 고유한 이미지 생성 ===
            UNIQUE_BUILD_ID="build-${{ github.run_number }}-$(date +%s)"
            echo "🔑 고유 빌드 ID: $UNIQUE_BUILD_ID"
            
            # 고유성 보장 파일 생성
            mkdir -p backend/$SERVICE/build-metadata
            cat > backend/$SERVICE/build-metadata/version.json << EOF
          {
            "version": "v$NEXT_VERSION",
            "buildId": "$UNIQUE_BUILD_ID",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "runNumber": "${{ github.run_number }}",
            "service": "$SERVICE_TAG"
          }
          EOF
            
            # Dockerfile에 고유성 레이어 추가
            cat >> backend/$SERVICE/Dockerfile << EOF
          
          # Version metadata for uniqueness
          COPY build-metadata/version.json /app/version.json
          RUN echo "Build: $UNIQUE_BUILD_ID" > /app/build-marker
          EOF
            
            # === 3. 새 버전 이미지 빌드 ===
            NEW_VERSION_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            
            echo "🏗️  빌드 시작: $NEW_VERSION_TAG"
            
            if docker build -t "$NEW_VERSION_TAG" backend/$SERVICE/; then
              echo "✅ 빌드 성공"
              
              # 이미지 ID 확인
              IMAGE_ID=$(docker image inspect "$NEW_VERSION_TAG" --format='{{.Id}}')
              echo "🆔 이미지 ID: ${IMAGE_ID:7:12}..."
              
              # === 4. 새 버전만 푸시 (기존 태그 건드리지 않음) ===
              echo "📤 새 버전 푸시: $SERVICE_TAG-v$NEXT_VERSION"
              if docker push "$NEW_VERSION_TAG"; then
                echo "✅ 새 버전 푸시 성공"
                
                # === 5. latest 태그만 별도 처리 ===
                LATEST_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
                echo "🏷️  latest 태그 업데이트..."
                
                docker tag "$NEW_VERSION_TAG" "$LATEST_TAG"
                if docker push "$LATEST_TAG"; then
                  echo "✅ latest 태그 업데이트 완료"
                else
                  echo "❌ latest 태그 실패"
                fi
              else
                echo "❌ 새 버전 푸시 실패"
              fi
            else
              echo "❌ 빌드 실패"
            fi
            
            # === 6. 정리 작업 ===
            rm -rf backend/$SERVICE/build-metadata
            
            # Dockerfile 원복 (마지막 3줄 제거)
            sed -i '' '/^# Version metadata for uniqueness$/,$d' backend/$SERVICE/Dockerfile
            
            echo "🎉 $SERVICE_TAG 처리 완료"
            echo "   📦 생성: $SERVICE_TAG-v$NEXT_VERSION"
            echo "   🏷️  latest: → v$NEXT_VERSION"
          done
          
      - name: Final verification
        if: steps.analyze.outputs.build_services != ''
        env:
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          echo ""
          echo "🔍 최종 검증..."
          
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "📊 $SERVICE_TAG 최종 상태:"
            
            # 모든 버전 태그 확인
            ALL_VERSIONS=$(aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].{Tags:imageTags[0],Digest:imageDigest}" \
              --output json | jq -r '.[] | "\(.Tags) (\(.Digest[7:19]))"')
            
            echo "📦 모든 버전들:"
            echo "$ALL_VERSIONS" | sort
            
            # latest 태그 확인
            LATEST_INFO=$(aws ecr describe-images \
              --repository-name kubox \
              --image-ids imageTag="$SERVICE_TAG-latest" \
              --query "imageDetails[0].{Tags:imageTags,Digest:imageDigest}" \
              --output json 2>/dev/null | jq -r '"latest -> \(.Digest[7:19])"' || echo "latest 없음")
            
            echo "🏷️  $LATEST_INFO"
          done
          
      - name: Success summary
        run: |
          echo ""
          echo "🎯 진정한 증분 버전 빌드 성공!"
          echo "📈 처리된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo ""
          echo "✅ 이제 ECR에서 다음과 같이 확인됩니다:"
          echo "   📦 user-v1 (고유 Digest)"
          echo "   📦 user-v2 (고유 Digest)"  
          echo "   📦 user-v3 (고유 Digest)"
          echo "   🏷️  user-latest → 최신 버전"
          echo ""
          echo "🔒 기존 버전들은 절대 사라지지 않습니다!"
