name: Backend MSA Deploy with Smart Detection

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest
    outputs:
      analysis-result: ${{ steps.sonarqube-scan.outcome }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarQube를 위해 전체 히스토리 필요
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: |
          find backend/ -name "gradlew" -exec chmod +x {} \;

      - name: Build and Test with Gradle
        run: |
          echo "🔨 Building and testing all backend services..."
          for service in backend/*/; do
            if [ -f "$service/build.gradle" ]; then
              service_name=$(basename "$service")
              echo "📦 Building $service_name..."
              cd "$service"
              ./gradlew clean build -x test  # 테스트는 별도로 실행
              ./gradlew test --continue || true  # 테스트 실패해도 계속 진행
              cd ../..
            fi
          done

      - name: Build services for SonarQube
        run: |
          echo "🔨 Building services for SonarQube analysis..."
          for service in backend/*/; do
            if [ -f "$service/build.gradle" ]; then
              service_name=$(basename "$service")
              echo "📦 Building $service_name for analysis..."
              cd "$service"
              ./gradlew clean compileJava compileTestJava
              cd ../..
            fi
          done

      - name: Run SonarQube Scan
        id: sonarqube-scan
        run: |
          # SonarQube Scanner 다운로드 및 실행
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
          
          # SonarQube 스캔 실행
          sonar-scanner \
            -Dsonar.projectKey=kubox-shopping-mall \
            -Dsonar.sources=backend \
            -Dsonar.java.binaries=backend/user-service/build/classes/java/main,backend/product-service/build/classes/java/main,backend/cart-service/build/classes/java/main,backend/order-service/build/classes/java/main,backend/payment-service/build/classes/java/main \
            -Dsonar.java.test.binaries=backend/user-service/build/classes/java/test,backend/product-service/build/classes/java/test,backend/cart-service/build/classes/java/test,backend/order-service/build/classes/java/test,backend/payment-service/build/classes/java/test \
            -Dsonar.exclusions="**/build/**,**/gradle/**,**/gradlew,**/gradlew.bat,**/.gradle/**" \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      - name: 📊 Notify SonarQube Analysis Complete
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "",
              "attachments": [
                {
                  "color": "#36a64f",
                  "title": "🔍 SonarQube Code Analysis Completed",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "`${{ env.SHORT_SHA }}`",
                      "short": true
                    },
                    {
                      "title": "Triggered by",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ],
                  "footer": "SonarQube Analysis",
                  "footer_icon": "https://docs.sonarqube.org/latest/images/favicon.ico",
                  "ts": "${{ env.TIMESTAMP }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


  # 수동 승인 단계 
  manual-approval:
    name: 🔍 Manual Deployment Approval
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Display Approval Information
        run: |
          echo "🔍 Code Quality Analysis Complete!"
          echo "📊 Please check SonarQube Dashboard for detailed analysis results"
          echo ""
          echo "⏳ This deployment requires manual approval."
          echo "👥 Approved reviewers: IluvRiver, JH2050, choiyunha"
          echo ""
          echo "📋 Before approving, please verify:"
          echo "  ✅ Quality Gate Status: PASSED"
          echo "  ✅ No Critical/Major Security Issues" 
          echo "  ✅ Code Coverage meets requirements"
          echo "  ✅ No Duplicated Code violations"
          echo "  ✅ Technical Debt ratio is acceptable"
          echo ""
          echo "🚀 Ready to proceed with deployment!"

      - name: ⏳ Notify Approval Required
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "",
              "attachments": [{
                "color": "#ff9500", 
                "title": "⏳ Manual Approval Required for Deployment",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Workflow",
                    "value": "${{ github.workflow }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "🔍 SonarQube analysis completed - Waiting for approval",
                    "short": false
                  },
                  {
                    "title": "👥 Reviewers",
                    "value": "@IluvRiver @JH2050 @choiyunha",
                    "short": false
                  },
                  {
                    "title": "📋 Approval Checklist", 
                    "value": "• Quality Gate: PASSED\n• No Critical Security Issues\n• Code Coverage meets requirements\n• Technical Debt is acceptable",
                    "short": false
                  },
                  {
                    "title": "🔗 Review & Approve",
                    "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here to review and approve>",
                    "short": false
                  }
                ],
                "footer": "GitHub Actions - Manual Approval",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 승인 후 빌드 및 배포
  build-and-deploy:
    name: 🚀 Build and Deploy
    needs: [sonarqube-analysis, manual-approval]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 🚀 Notify Deployment Started
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "",
              "attachments": [{
                "color": "#36a64f",
                "title": "🚀 Deployment Approved - Starting Build Process",
                "fields": [
                  {
                    "title": "Repository", 
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "✅ Manual approval received\n🏗️ Starting Docker image build process...",
                    "short": false
                  }
                ],
                "footer": "GitHub Actions - Build Started", 
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: false
          
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
        
      - name: 🔍 Detect Changed Services Only
        id: detect-services
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ALL_SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          echo "🔍 Smart Detection: Analyzing changed files to build ONLY modified services"
          echo ""
          
          # 안전한 변경 파일 감지
          CHANGED_FILES=""
          if [ "${{ github.event_name }}" = "push" ]; then
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
              echo "📋 Comparing with previous commit (HEAD~1)"
            else
              echo "⚠️  First commit detected - will build all services"
              BUILD_SERVICES="${ALL_SERVICES[@]}"
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
              echo "📋 Manual trigger - checking recent commit changes"
            else
              CHANGED_FILES=$(git show --name-only --format="" HEAD)
              echo "📋 Manual trigger - analyzing current commit"
            fi
          fi
          
          # 변경된 파일이 있으면 해당 서비스만 정확히 찾기
          if [ -n "$CHANGED_FILES" ] && [ -z "$BUILD_SERVICES" ]; then
            echo "📄 Changed files:"
            echo "$CHANGED_FILES"
            echo ""
            
            # 각 서비스별로 정확한 경로 매칭
            for SERVICE in "${ALL_SERVICES[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "^backend/$SERVICE/"; then
                echo "✅ Changes detected in: $SERVICE"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⚪ No changes in: $SERVICE"
              fi
            done
            
            BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
            
            # 백엔드와 무관한 변경사항만 있는 경우
            if [ -z "$BUILD_SERVICES" ] && ! echo "$CHANGED_FILES" | grep -q "^backend/.*\.java\|^backend/.*/Dockerfile\|^backend/.*/build\.gradle"; then
              echo ""
              echo "ℹ️  No backend service code changes detected"
              echo "📋 Changed files appear to be:"
              echo "$CHANGED_FILES" | grep -E "(\.md$|\.yml$|^\.github|^frontend|^docs)" || echo "Non-service backend files"
              echo ""
              echo "⏭️  Skipping Docker build - no service changes found"
              echo "build_services=" >> $GITHUB_ENV
              echo "skip_build=true" >> $GITHUB_ENV
              exit 0
            fi
            
            # 백엔드 변경이 있지만 특정 서비스 디렉토리가 아닌 경우 (공통 파일 등)
            if [ -z "$BUILD_SERVICES" ] && echo "$CHANGED_FILES" | grep -q "^backend/"; then
              echo ""
              echo "🤔 Backend changes detected but not in specific service directories"
              echo "📋 Changed backend files:"
              echo "$CHANGED_FILES" | grep "^backend/"
              echo ""
              echo "🛡️  Building all services for safety (common files may affect all)"
              BUILD_SERVICES="${ALL_SERVICES[@]}"
            fi
          fi
          
          if [ -z "$BUILD_SERVICES" ]; then
            echo ""
            echo "🎯 Result: No services need building"
            echo "build_services=" >> $GITHUB_ENV
            echo "skip_build=true" >> $GITHUB_ENV
            exit 0
          fi
          
          echo ""
          echo "🎯 FINAL DECISION: Building these services only:"
          for SERVICE in $BUILD_SERVICES; do
            echo "  🔨 $SERVICE"
          done
          echo ""
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_ENV
          echo "skip_build=false" >> $GITHUB_ENV
          
          # Slack 알림을 위한 서비스 목록 포맷팅
          FORMATTED_SERVICES=$(echo $BUILD_SERVICES | sed 's/ /, /g')
          echo "formatted_services=$FORMATTED_SERVICES" >> $GITHUB_ENV
          
      - name: Build services
        id: build-services
        if: env.skip_build != 'true' && env.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # 고유성을 위한 타임스탬프 (내부 빌드용)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BUILD_NUMBER="${{ github.run_number }}"
          
          # 빌드된 서비스와 버전을 저장할 배열
          BUILT_SERVICES=""
          
          echo "🏗️ Starting Docker build process for selected services..."
          echo ""
          
          for SERVICE in ${{ env.build_services }}; do
            echo "==================== $SERVICE ===================="
            
            # 현재 서비스의 기존 버전 확인
            EXISTING_VERSIONS=$(aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null | \
              tr '\t' '\n' | \
              grep "^${SERVICE}-v[0-9]*$" | \
              sed "s/${SERVICE}-v//" | \
              sort -n || echo "")
            
            if [ -z "$EXISTING_VERSIONS" ]; then
              NEXT_VERSION=1
              echo "🆕 First version for $SERVICE: v1"
            else
              LATEST_VERSION=$(echo "$EXISTING_VERSIONS" | tail -1)
              NEXT_VERSION=$((LATEST_VERSION + 1))
              echo "📈 $SERVICE: v$LATEST_VERSION → v$NEXT_VERSION"
            fi
            
            # 최종 태그들
            VERSION_TAG="${SERVICE}-v${NEXT_VERSION}"
            LATEST_TAG="${SERVICE}-latest"
            
            # 임시 고유 태그 (충돌 방지용)
            TEMP_TAG="${SERVICE}-temp-${TIMESTAMP}-${BUILD_NUMBER}"
            
            VERSION_URI="$ECR_REGISTRY/kubox:$VERSION_TAG"
            LATEST_URI="$ECR_REGISTRY/kubox:$LATEST_TAG"
            
            echo "🏗️  Building: $VERSION_TAG"
            
            # 도커 빌드 (VERSION 인자 전달)
            cd backend/$SERVICE
            
            if docker build --build-arg VERSION="$VERSION_TAG" -t "$TEMP_TAG" .; then
              echo "✅ Build successful: $SERVICE"
              
              # 버전 태그 적용 및 푸시
              docker tag "$TEMP_TAG" "$VERSION_URI"
              if docker push "$VERSION_URI"; then
                echo "✅ Pushed: $VERSION_TAG"
                
                # latest 태그 적용 및 푸시
                docker tag "$TEMP_TAG" "$LATEST_URI"
                docker push "$LATEST_URI"
                echo "✅ Updated: $LATEST_TAG"
                
                # 빌드 성공한 서비스 기록
                BUILT_SERVICES="$BUILT_SERVICES $SERVICE:$VERSION_TAG"
                
              else
                echo "❌ Failed to push: $VERSION_TAG"
              fi
              
              # 임시 태그 정리
              docker rmi "$TEMP_TAG" 2>/dev/null || true
              
            else
              echo "❌ Build failed: $SERVICE"
            fi
            
            cd ../..
            echo ""
          done

          # 빌드 결과를 환경변수로 저장
          echo "built_services=$BUILT_SERVICES" >> $GITHUB_ENV
          
          # Slack 알림용 포맷팅
          FORMATTED_BUILT=$(echo $BUILT_SERVICES | sed 's/ /\\n• /g' | sed 's/:/: /g')
          echo "formatted_built_services=$FORMATTED_BUILT" >> $GITHUB_ENV

      - name: 🚀 Notify Build Complete
        if: success() && env.skip_build != 'true' && env.built_services != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "",
              "attachments": [{
                "color": "#36a64f",
                "title": "🚀 Docker Images Successfully Built and Pushed to ECR",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "🎯 Built Services",
                    "value": "${{ env.formatted_services }}",
                    "short": false
                  },
                  {
                    "title": "📦 New Image Tags",
                    "value": "• ${{ env.formatted_built_services }}",
                    "short": false
                  },
                  {
                    "title": "🏪 ECR Repository",
                    "value": "`${{ steps.login-ecr.outputs.registry }}/kubox`",
                    "short": false
                  }
                ],
                "footer": "AWS ECR - Image Push Complete",
                "footer_icon": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
                "ts": $(date +%s)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ℹ️  Notify No Changes
        if: env.skip_build == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "",
              "attachments": [{
                "color": "#36a64f",
                "title": "ℹ️ No Docker Build Required",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch", 
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "📋 Analysis Result",
                    "value": "✅ SonarQube analysis completed\n⚪ No backend service code changes detected\n⏭️ Skipping Docker image build",
                    "short": false
                  }
                ],
                "footer": "Smart Build Detection",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Update Helm Chart
        if: env.skip_build != 'true' && env.built_services != ''
        run: |
          echo "🔄 Updating Helm Chart with new image tags..."
          
          # Git 설정
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 토큰 확인
          if [ -z "${{ secrets.HELM_REPO_TOKEN }}" ]; then
            echo "❌ HELM_REPO_TOKEN is not set - skipping helm chart update"
            exit 0
          fi
          
          # Helm Chart 저장소 클론
          if git clone https://${{ secrets.HELM_REPO_TOKEN }}@github.com/Kuboxer/kubox-helm-chart.git helm-repo; then
            echo "✅ Successfully cloned helm chart repository"
          else
            echo "❌ Failed to clone helm chart repository - skipping update"
            exit 0
          fi
          
          cd helm-repo
          
          # 빌드된 각 서비스의 태그 업데이트
          for SERVICE_TAG in ${{ env.built_services }}; do
            SERVICE=$(echo $SERVICE_TAG | cut -d':' -f1)
            TAG=$(echo $SERVICE_TAG | cut -d':' -f2)
            
            echo "📝 Updating $SERVICE to $TAG"
            
            # values.yaml에서 해당 서비스의 태그 업데이트
            case $SERVICE in
              "user-service")
                if [ -f values.yaml ]; then
                  sed -i "s/tag: user-service-v.*/tag: $TAG/" values.yaml
                fi
                ;;
              "product-service")
                if [ -f values.yaml ]; then
                  sed -i "s/tag: product-service-v.*/tag: $TAG/" values.yaml
                fi
                ;;
              "cart-service")
                if [ -f values.yaml ]; then
                  sed -i "s/tag: cart-service-v.*/tag: $TAG/" values.yaml
                fi
                ;;
              "order-service")
                if [ -f values.yaml ]; then
                  sed -i "s/tag: order-service-v.*/tag: $TAG/" values.yaml
                fi
                ;;
              "payment-service")
                if [ -f values.yaml ]; then
                  sed -i "s/tag: payment-service-v.*/tag: $TAG/" values.yaml
                fi
                ;;
            esac
          done
          
          # 변경사항 커밋 & 푸시
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update image tags: ${{ env.built_services }}"
            git push https://${{ secrets.HELM_REPO_TOKEN }}@github.com/Kuboxer/kubox-helm-chart.git main && echo "✅ Helm chart updated successfully" || echo "⚠️  Failed to push helm chart changes"
          else
            echo "ℹ️  No changes to commit"
          fi

  # 최종 알림 - 기본 알림 대신 맞춤형 알림
  final-notification:
    name: 📊 Final Status
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [sonarqube-analysis, manual-approval, build-and-deploy]
    steps:
      - name: 🎉 Notify Workflow Complete
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "",
              "attachments": [{
                "color": "${{ needs.build-and-deploy.result == 'success' && '#36a64f' || (needs.build-and-deploy.result == 'cancelled' && '#ff9500' || '#d73a49') }}",
                "title": "${{ needs.build-and-deploy.result == 'success' && '🎉 Deployment Workflow Completed Successfully' || (needs.build-and-deploy.result == 'cancelled' && '🛑 Deployment Workflow Cancelled' || '❌ Deployment Workflow Failed') }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Triggered by",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "`${{ github.sha }}`".substring(0, 10),
                    "short": true
                  },
                  {
                    "title": "📊 Workflow Summary",
                    "value": "• SonarQube Analysis: ${{ needs.sonarqube-analysis.result == 'success' && '✅ Success' || '❌ Failed' }}\n• Manual Approval: ${{ needs.manual-approval.result == 'success' && '✅ Approved' || (needs.manual-approval.result == 'cancelled' && '🛑 Cancelled' || '❌ Failed') }}\n• Build & Deploy: ${{ needs.build-and-deploy.result == 'success' && '✅ Success' || (needs.build-and-deploy.result == 'cancelled' && '🛑 Cancelled' || '❌ Failed') }}",
                    "short": false
                  },
                  {
                    "title": "🔗 View Details",
                    "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions Workflow>",
                    "short": false
                  }
                ],
                "footer": "GitHub Actions - Workflow Complete",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
