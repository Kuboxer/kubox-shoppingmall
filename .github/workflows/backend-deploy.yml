name: Incremental Versioning Build

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes
        id: analyze
        run: |
          echo "🔍 변경 분석..."
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            for SERVICE in "${SERVICES[@]}"; do
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 변경됨"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⏭️  $SERVICE: 변경 없음"
              fi
            done
          fi
          
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "최종 빌드 대상: [$BUILD_SERVICES]"
        
      - name: Build with incremental versioning
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🚀 증분 버전 빌드 시작..."
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "🔨 처리 중: $SERVICE → $SERVICE_TAG"
            
            # 현재 모든 버전 태그 확인
            echo "📋 기존 버전 확인..."
            ALL_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            echo "전체 태그 목록:"
            echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-v" | sort -V || echo "없음"
            
            # 해당 서비스의 기존 버전들 찾기
            EXISTING_VERSIONS=$(echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-v[0-9]*$" | sed "s/$SERVICE_TAG-v//" | sort -n || echo "")
            
            echo "기존 버전들: $EXISTING_VERSIONS"
            
            # 다음 버전 계산
            if [ -z "$EXISTING_VERSIONS" ]; then
              NEXT_VERSION=1
              echo "첫 번째 버전 생성: v1"
            else
              MAX_VERSION=$(echo "$EXISTING_VERSIONS" | tail -1)
              NEXT_VERSION=$((MAX_VERSION + 1))
              echo "버전 증가: v$MAX_VERSION → v$NEXT_VERSION"
            fi
            
            # 새 버전 태그만 생성 (기존 버전은 유지)
            NEW_VERSION_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            NEW_LATEST_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
            
            echo "🏗️  Docker 빌드..."
            echo "새 버전: $NEW_VERSION_TAG"
            
            # 1. 새 버전으로 빌드
            if docker build -t "$NEW_VERSION_TAG" "backend/$SERVICE/"; then
              echo "✅ 빌드 성공"
            else
              echo "❌ 빌드 실패"
              exit 1
            fi
            
            # 2. 새 버전 태그 푸시 (기존 버전들은 건드리지 않음)
            echo "📤 새 버전 푸시: $SERVICE_TAG-v$NEXT_VERSION"
            if docker push "$NEW_VERSION_TAG"; then
              echo "✅ 새 버전 푸시 성공"
            else
              echo "❌ 새 버전 푸시 실패"
              exit 1
            fi
            
            # 3. latest 태그를 새 버전으로 이동
            echo "🏷️  latest 태그를 새 버전으로 업데이트..."
            docker tag "$NEW_VERSION_TAG" "$NEW_LATEST_TAG"
            
            if docker push "$NEW_LATEST_TAG"; then
              echo "✅ latest 태그 업데이트 성공"
            else
              echo "❌ latest 태그 업데이트 실패"
              exit 1
            fi
            
            echo "🎉 $SERVICE 완료:"
            echo "  ✅ 새 버전: $SERVICE_TAG-v$NEXT_VERSION (새로 생성)"
            echo "  ✅ latest: $SERVICE_TAG-latest (새 버전으로 이동)"
            echo "  ✅ 기존 버전들: 그대로 유지됨"
          done
          
      - name: Verify final state
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          echo "🔍 최종 상태 확인..."
          
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "📊 $SERVICE_TAG 최종 상태:"
            
            # 모든 관련 태그 확인
            ALL_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            VERSION_TAGS=$(echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-v[0-9]*$" | sort -V || echo "없음")
            LATEST_TAG=$(echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-latest$" || echo "없음")
            
            echo "  📌 버전 태그들: $VERSION_TAGS"
            echo "  🏷️  latest 태그: $LATEST_TAG"
            
            # latest가 가리키는 이미지 확인
            if [ "$LATEST_TAG" != "없음" ]; then
              LATEST_DIGEST=$(aws ecr describe-images \
                --repository-name kubox \
                --image-ids imageTag="$SERVICE_TAG-latest" \
                --query 'imageDetails[0].imageDigest' \
                --output text 2>/dev/null || echo "확인 실패")
              echo "  🔗 latest가 가리키는 이미지: $LATEST_DIGEST"
            fi
          done
          
      - name: Summary
        run: |
          echo ""
          echo "🎯 증분 버전 빌드 완료!"
          echo "빌드된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo ""
          echo "✅ 기존 버전들은 그대로 유지됩니다 (v1, v2, v3...)"
          echo "✅ 새로운 버전만 추가로 생성됩니다"
          echo "✅ latest 태그는 가장 최신 버전을 가리킵니다"
