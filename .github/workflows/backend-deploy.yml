name: Proper Incremental Versioning

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes
        id: analyze
        run: |
          echo "🔍 변경 분석..."
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            for SERVICE in "${SERVICES[@]}"; do
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 변경됨"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⏭️  $SERVICE: 변경 없음"
              fi
            done
          fi
          
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "최종 빌드 대상: [$BUILD_SERVICES]"
        
      - name: Build separate images for each version
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🚀 각 버전별 별개 이미지 생성..."
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "🔨 처리 중: $SERVICE → $SERVICE_TAG"
            
            # 기존 버전 태그들 확인
            echo "📋 기존 버전 확인..."
            ALL_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            # 기존 버전 번호들 추출
            EXISTING_VERSIONS=$(echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-v[0-9]*$" | sed "s/$SERVICE_TAG-v//" | sort -n || echo "")
            
            if [ -z "$EXISTING_VERSIONS" ]; then
              NEXT_VERSION=1
              echo "첫 번째 버전: v1"
            else
              MAX_VERSION=$(echo "$EXISTING_VERSIONS" | tail -1)
              NEXT_VERSION=$((MAX_VERSION + 1))
              echo "기존 최고 버전: v$MAX_VERSION"
              echo "새 버전: v$NEXT_VERSION"
              
              # 기존 버전들 출력
              echo "기존 버전들 (유지됨):"
              for VER in $EXISTING_VERSIONS; do
                echo "  ✅ $SERVICE_TAG-v$VER (그대로 유지)"
              done
            fi
            
            # 새 버전 이미지 빌드 (독립적인 이미지)
            NEW_VERSION_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            
            echo ""
            echo "🏗️  새 버전 독립 빌드: $SERVICE_TAG-v$NEXT_VERSION"
            
            # 새 이미지 빌드 (기존 이미지와 완전 별개)
            if docker build -t "$NEW_VERSION_TAG" "backend/$SERVICE/"; then
              echo "✅ v$NEXT_VERSION 이미지 빌드 성공"
            else
              echo "❌ 빌드 실패"
              exit 1
            fi
            
            # 새 버전 푸시
            echo "📤 새 버전 푸시..."
            if docker push "$NEW_VERSION_TAG"; then
              echo "✅ $SERVICE_TAG-v$NEXT_VERSION 푸시 성공"
            else
              echo "❌ 푸시 실패"
              exit 1
            fi
            
            # latest 태그 처리 (기존 latest를 제거하고 새로 생성)
            echo ""
            echo "🏷️  latest 태그 업데이트..."
            
            # 기존 latest 태그가 있다면 삭제
            EXISTING_LATEST=$(echo "$ALL_TAGS" | tr '\t' '\n' | grep "^$SERVICE_TAG-latest$" || echo "")
            if [ -n "$EXISTING_LATEST" ]; then
              echo "🗑️  기존 latest 태그 제거 중..."
              # latest 태그만 제거 (이미지는 유지)
              aws ecr batch-delete-image \
                --repository-name kubox \
                --image-ids imageTag="$SERVICE_TAG-latest" >/dev/null 2>&1 || echo "latest 태그 제거 실패 (무시)"
            fi
            
            # 새 이미지에 latest 태그 추가
            NEW_LATEST_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
            docker tag "$NEW_VERSION_TAG" "$NEW_LATEST_TAG"
            
            if docker push "$NEW_LATEST_TAG"; then
              echo "✅ latest 태그를 v$NEXT_VERSION에 연결 완료"
            else
              echo "❌ latest 태그 업데이트 실패"
              exit 1
            fi
            
            echo ""
            echo "🎉 $SERVICE 완료 요약:"
            echo "  🆕 새로 생성: $SERVICE_TAG-v$NEXT_VERSION"
            echo "  🏷️  latest 이동: $SERVICE_TAG-latest → v$NEXT_VERSION"
            if [ -n "$EXISTING_VERSIONS" ]; then
              echo "  ✅ 기존 버전들: v$(echo $EXISTING_VERSIONS | tr ' ' ', v') (모두 유지)"
            fi
          done
          
      - name: Final verification
        if: steps.analyze.outputs.build_services != ''
        env:
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          echo ""
          echo "🔍 최종 검증..."
          
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "📊 $SERVICE_TAG 최종 상태:"
            
            # 모든 관련 이미지 확인
            IMAGES=$(aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG')].{Tags:imageTags,Pushed:imagePushedAt}" \
              --output table 2>/dev/null || echo "확인 실패")
            
            echo "$IMAGES"
          done
          
      - name: Summary
        run: |
          echo ""
          echo "🎯 증분 버전 빌드 완료!"
          echo "📈 변경된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo ""
          echo "✅ 각 버전은 독립적인 이미지로 생성됩니다"
          echo "✅ 기존 버전들은 절대 삭제되지 않습니다"  
          echo "✅ latest는 항상 최신 버전을 가리킵니다"
          echo "✅ ECR에서 user-v1, user-v2, user-v3... 모든 버전 확인 가능"
