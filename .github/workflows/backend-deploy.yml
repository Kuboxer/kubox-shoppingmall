name: Backend MSA Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Detect changed services and build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Î≥ÄÍ≤ΩÎêú ÌååÏùº ÌôïÏù∏
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Î≥ÄÍ≤ΩÎêú ÏÑúÎπÑÏä§ Ï∞æÍ∏∞
          CHANGED_SERVICES=""
          
          if echo "$CHANGED_FILES" | grep -q "backend/user-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES user-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/product-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES product-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/order-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES order-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/payment-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES payment-service"
          fi
          
          if echo "$CHANGED_FILES" | grep -q "backend/cart-service/"; then
            CHANGED_SERVICES="$CHANGED_SERVICES cart-service"
          fi
          
          CHANGED_SERVICES=$(echo $CHANGED_SERVICES | xargs)
          
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No service changes detected. Skipping build."
            exit 0
          fi
          
          echo "Changed services: $CHANGED_SERVICES"
          
          # ÌòÑÏû¨ ÏãúÍ∞ÑÏùÑ Î≤ÑÏ†ÑÏúºÎ°ú ÏÇ¨Ïö© (Ï†àÎåÄ Ï§ëÎ≥µÎêòÏßÄ ÏïäÏùå)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BUILD_NUMBER="${{ github.run_number }}"
          
          for SERVICE in $CHANGED_SERVICES; do
            echo "=== Processing $SERVICE ==="
            
            # Í≥†Ïú†Ìïú Î≤ÑÏ†Ñ ÌÉúÍ∑∏ ÏÉùÏÑ± (ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ + ÎπåÎìúÎ≤àÌò∏)
            VERSION_TAG="${SERVICE}-${TIMESTAMP}-${BUILD_NUMBER}"
            LATEST_TAG="${SERVICE}-latest"
            
            IMAGE_URI="$ECR_REGISTRY/kubox:$VERSION_TAG"
            LATEST_URI="$ECR_REGISTRY/kubox:$LATEST_TAG"
            
            echo "Building with unique tag: $VERSION_TAG"
            
            # ÎèÑÏª§ ÎπåÎìú
            cd backend/$SERVICE
            
            if docker build -t "$IMAGE_URI" .; then
              echo "‚úÖ Build successful for $VERSION_TAG"
              
              # Î≤ÑÏ†Ñ ÌÉúÍ∑∏ Ìë∏Ïãú
              if docker push "$IMAGE_URI"; then
                echo "‚úÖ Successfully pushed $VERSION_TAG"
                
                # latest ÌÉúÍ∑∏ ÏÉùÏÑ± Î∞è Ìë∏Ïãú
                docker tag "$IMAGE_URI" "$LATEST_URI"
                docker push "$LATEST_URI"
                echo "‚úÖ Updated latest tag"
                
                # Ï∂îÍ∞ÄÎ°ú Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ ÌÉúÍ∑∏ÎèÑ ÏÉùÏÑ± (v1, v2, v3...)
                # ÌòÑÏû¨ ÏÑúÎπÑÏä§Ïùò Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ ÌÉúÍ∑∏Îì§ Ï°∞Ìöå
                SIMPLE_VERSIONS=$(aws ecr describe-images \
                  --repository-name kubox \
                  --query "imageDetails[].imageTags[]" \
                  --output text 2>/dev/null | \
                  tr '\t' '\n' | \
                  grep "^${SERVICE}-v[0-9]*$" | \
                  sed "s/${SERVICE}-v//" | \
                  sort -n || echo "")
                
                if [ -z "$SIMPLE_VERSIONS" ]; then
                  NEXT_SIMPLE_VERSION=1
                else
                  LATEST_SIMPLE=$(echo "$SIMPLE_VERSIONS" | tail -1)
                  NEXT_SIMPLE_VERSION=$((LATEST_SIMPLE + 1))
                fi
                
                SIMPLE_TAG="${SERVICE}-v${NEXT_SIMPLE_VERSION}"
                SIMPLE_URI="$ECR_REGISTRY/kubox:$SIMPLE_TAG"
                
                # Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ ÌÉúÍ∑∏ÎèÑ Ï∂îÍ∞Ä
                docker tag "$IMAGE_URI" "$SIMPLE_URI"
                docker push "$SIMPLE_URI"
                echo "‚úÖ Also tagged as $SIMPLE_TAG"
                
              else
                echo "‚ùå Failed to push $VERSION_TAG"
              fi
            else
              echo "‚ùå Build failed for $SERVICE"
            fi
            
            cd ../..
            echo "‚úÖ Completed $SERVICE with tags: $VERSION_TAG, $SIMPLE_TAG, latest"
            echo "---"
          done
          
      - name: Show final state
        run: |
          echo "üéâ Build completed!"
          echo "Each service now has:"
          echo "  üì¶ Unique timestamp version (never conflicts)"
          echo "  üî¢ Simple version (v1, v2, v3...)"
          echo "  üè∑Ô∏è  Latest tag"
