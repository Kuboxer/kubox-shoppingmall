name: Build and Push Backend Services

on:
  workflow_dispatch: 
  push:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Get short commit hash
        id: vars
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
        
      - name: Determine next version for each service
        id: version
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # ÏÑúÎπÑÏä§ Îß§Ìïë (Ìè¥ÎçîÎ™Ö:ÌÉúÍ∑∏Î™Ö)
          declare -A SERVICES
          SERVICES["user-service"]="user"
          SERVICES["product-service"]="prod" 
          SERVICES["order-service"]="order"
          SERVICES["payment-service"]="pay"
          SERVICES["cart-service"]="cart"
          
          # Í∞Å ÏÑúÎπÑÏä§Ïùò Îã§Ïùå Î≤ÑÏ†Ñ Í≥ÑÏÇ∞
          for SERVICE_DIR in "${!SERVICES[@]}"; do
            SERVICE_TAG="${SERVICES[$SERVICE_DIR]}"
            
            echo "üîç Checking existing versions for $SERVICE_TAG..."
            
            # ECRÏóêÏÑú Ìï¥Îãπ ÏÑúÎπÑÏä§Ïùò Î™®Îì† ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
            EXISTING_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            # ÏµúÍ≥† Î≤ÑÏ†Ñ Ï∞æÍ∏∞
            MAX_VERSION=0
            if [[ -n "$EXISTING_TAGS" ]]; then
              for TAG in $EXISTING_TAGS; do
                if [[ $TAG =~ ^$SERVICE_TAG-v([0-9]+)$ ]]; then
                  VERSION_NUM=${BASH_REMATCH[1]}
                  if (( VERSION_NUM > MAX_VERSION )); then
                    MAX_VERSION=$VERSION_NUM
                  fi
                fi
              done
            fi
            
            # Îã§Ïùå Î≤ÑÏ†Ñ Í≥ÑÏÇ∞
            NEXT_VERSION=$((MAX_VERSION + 1))
            
            echo "üì¶ $SERVICE_TAG: v$MAX_VERSION ‚Üí v$NEXT_VERSION"
            echo "${SERVICE_TAG}_VERSION=v$NEXT_VERSION" >> $GITHUB_OUTPUT
          done
        
      - name: Build and push Docker images for 5 backend services
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SHA_TAG: ${{ steps.vars.outputs.sha_short }}
          USER_VERSION: ${{ steps.version.outputs.user_VERSION }}
          PROD_VERSION: ${{ steps.version.outputs.prod_VERSION }}
          ORDER_VERSION: ${{ steps.version.outputs.order_VERSION }}
          PAY_VERSION: ${{ steps.version.outputs.pay_VERSION }}
          CART_VERSION: ${{ steps.version.outputs.cart_VERSION }}
        run: |
          # ÏÑúÎπÑÏä§ Îß§ÌïëÍ≥º Î≤ÑÏ†Ñ Îß§Ìïë
          declare -A SERVICES
          SERVICES["user-service"]="user"
          SERVICES["product-service"]="prod" 
          SERVICES["order-service"]="order"
          SERVICES["payment-service"]="pay"
          SERVICES["cart-service"]="cart"
          
          declare -A VERSIONS
          VERSIONS["user"]="$USER_VERSION"
          VERSIONS["prod"]="$PROD_VERSION"
          VERSIONS["order"]="$ORDER_VERSION"
          VERSIONS["pay"]="$PAY_VERSION"
          VERSIONS["cart"]="$CART_VERSION"
          
          echo "üöÄ Starting build process..."
          
          for SERVICE_DIR in "${!SERVICES[@]}"; do
            SERVICE_TAG="${SERVICES[$SERVICE_DIR]}"
            VERSION="${VERSIONS[$SERVICE_TAG]}"
            CONTEXT="backend/$SERVICE_DIR"
            
            # Î©îÏù∏ Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ (Î≤ÑÏ†Ñ + Ïª§Î∞ãÌï¥Ïãú)
            IMAGE_NAME="$ECR_REGISTRY/kubox:$SERVICE_TAG-$VERSION-$SHA_TAG"
            # latest Î≤ÑÏ†Ñ ÌÉúÍ∑∏
            LATEST_IMAGE="$ECR_REGISTRY/kubox:$SERVICE_TAG-$VERSION"
            
            echo "üî® Building $SERVICE_DIR"
            echo "   üì¶ Image: $IMAGE_NAME"
            echo "   üè∑Ô∏è  Latest: $LATEST_IMAGE"
            
            # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
            docker build -t $IMAGE_NAME $CONTEXT
            
            # ECRÏóê Ìë∏Ïãú
            docker push $IMAGE_NAME
            
            # latest Î≤ÑÏ†Ñ ÌÉúÍ∑∏ÎèÑ ÏÉùÏÑ±ÌïòÍ≥† Ìë∏Ïãú
            docker tag $IMAGE_NAME $LATEST_IMAGE
            docker push $LATEST_IMAGE
            
            echo "‚úÖ $SERVICE_DIR ‚Üí $SERVICE_TAG-$VERSION completed"
            echo "---"
          done
          
          echo "üéâ All services built successfully!"
          echo "Generated images:"
          echo "- kubox:user-$USER_VERSION-$SHA_TAG"
          echo "- kubox:prod-$PROD_VERSION-$SHA_TAG" 
          echo "- kubox:order-$ORDER_VERSION-$SHA_TAG"
          echo "- kubox:pay-$PAY_VERSION-$SHA_TAG"
          echo "- kubox:cart-$CART_VERSION-$SHA_TAG"
