name: Smart Build - Fixed Tagging Issue

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes
        id: analyze
        run: |
          echo "🔍 변경 분석..."
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            for SERVICE in "${SERVICES[@]}"; do
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 변경됨"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⏭️  $SERVICE: 변경 없음"
              fi
            done
          fi
          
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "최종 빌드 대상: [$BUILD_SERVICES]"
        
      - name: Build and tag services properly
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🚀 빌드 및 태깅 시작..."
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "🔨 처리 중: $SERVICE → $SERVICE_TAG"
            
            # 현재 최고 버전 확인
            echo "📋 기존 버전 확인..."
            EXISTING_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            echo "기존 태그들: $EXISTING_TAGS"
            
            MAX_VERSION=0
            if [[ -n "$EXISTING_TAGS" ]]; then
              for TAG in $EXISTING_TAGS; do
                if [[ $TAG =~ ^$SERVICE_TAG-v([0-9]+)$ ]]; then
                  VERSION_NUM=${BASH_REMATCH[1]}
                  if (( VERSION_NUM > MAX_VERSION )); then
                    MAX_VERSION=$VERSION_NUM
                  fi
                fi
              done
            fi
            
            NEXT_VERSION=$((MAX_VERSION + 1))
            echo "버전: v$MAX_VERSION → v$NEXT_VERSION"
            
            # 이미지 태그 정의
            TEMP_TAG="$ECR_REGISTRY/kubox:temp-$SERVICE_TAG-$(date +%s)"
            VERSIONED_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            LATEST_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
            
            echo "🏗️  Docker 빌드..."
            echo "임시 태그: $TEMP_TAG"
            
            # 1. 임시 태그로 빌드
            if docker build -t "$TEMP_TAG" "backend/$SERVICE/"; then
              echo "✅ 빌드 성공"
            else
              echo "❌ 빌드 실패"
              exit 1
            fi
            
            # 2. 버전 태그 생성 및 푸시
            echo "🏷️  버전 태그 생성: $VERSIONED_TAG"
            docker tag "$TEMP_TAG" "$VERSIONED_TAG"
            
            echo "📤 버전 태그 푸시..."
            if docker push "$VERSIONED_TAG"; then
              echo "✅ 버전 태그 푸시 성공"
            else
              echo "❌ 버전 태그 푸시 실패"
              exit 1
            fi
            
            # 3. latest 태그 생성 및 푸시
            echo "🏷️  latest 태그 생성: $LATEST_TAG"
            docker tag "$TEMP_TAG" "$LATEST_TAG"
            
            echo "📤 latest 태그 푸시..."
            if docker push "$LATEST_TAG"; then
              echo "✅ latest 태그 푸시 성공"
            else
              echo "❌ latest 태그 푸시 실패"
              exit 1
            fi
            
            # 4. 임시 이미지 정리
            docker rmi "$TEMP_TAG" || true
            
            echo "🎉 $SERVICE 완료: $SERVICE_TAG-v$NEXT_VERSION"
            
            # ECR에서 태그 확인
            echo "🔍 ECR 태그 확인..."
            aws ecr describe-images \
              --repository-name kubox \
              --image-ids imageTag="$SERVICE_TAG-v$NEXT_VERSION" \
              --query 'imageDetails[0].imageTags' \
              --output table || echo "태그 확인 실패"
          done
          
      - name: Verify all tags
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          echo "🔍 최종 태그 검증..."
          
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo "🔍 $SERVICE_TAG 태그 확인..."
            
            # 모든 태그 확인
            ALL_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG')].imageTags[]" \
              --output text 2>/dev/null || echo "없음")
            
            echo "$SERVICE_TAG 관련 태그들: $ALL_TAGS"
          done
          
      - name: Summary
        run: |
          echo "🎯 빌드 요약:"
          echo "빌드된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo ""
          echo "✅ 모든 이미지가 올바른 태그와 함께 생성되었습니다."
