name: Backend MSA Deploy - Fixed JSON

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: |
          find backend/ -name "gradlew" -exec chmod +x {} \;

      - name: Build and Test with Gradle
        run: |
          echo "🔨 Building and testing all backend services..."
          for service in backend/*/; do
            if [ -f "$service/build.gradle" ]; then
              service_name=$(basename "$service")
              echo "📦 Building $service_name..."
              cd "$service"
              ./gradlew clean build -x test
              ./gradlew test --continue || true
              cd ../..
            fi
          done

      - name: Build services for SonarQube
        run: |
          echo "🔨 Building services for SonarQube analysis..."
          for service in backend/*/; do
            if [ -f "$service/build.gradle" ]; then
              service_name=$(basename "$service")
              echo "📦 Building $service_name for analysis..."
              cd "$service"
              ./gradlew clean compileJava compileTestJava
              cd ../..
            fi
          done

      - name: Run SonarQube Scan
        id: sonarqube-scan
        run: |
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
          
          sonar-scanner \
            -Dsonar.projectKey=kubox-shopping-mall \
            -Dsonar.sources=backend \
            -Dsonar.java.binaries=backend/user-service/build/classes/java/main,backend/product-service/build/classes/java/main,backend/cart-service/build/classes/java/main,backend/order-service/build/classes/java/main,backend/payment-service/build/classes/java/main \
            -Dsonar.java.test.binaries=backend/user-service/build/classes/java/test,backend/product-service/build/classes/java/test,backend/cart-service/build/classes/java/test,backend/order-service/build/classes/java/test,backend/payment-service/build/classes/java/test \
            -Dsonar.exclusions="**/build/**,**/gradle/**,**/gradlew,**/gradlew.bat,**/.gradle/**" \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      - name: 📊 SonarQube Analysis Complete
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "#36a64f",
                "title": "🔍 SonarQube Code Analysis Completed",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "✅ Code analysis completed successfully\\n⏳ Manual approval required to proceed",
                    "short": false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  manual-approval:
    name: 🔍 Manual Approval
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Display Approval Information
        run: |
          echo "🔍 Code Quality Analysis Complete!"
          echo "⏳ This deployment requires manual approval."
          echo "👥 Approved reviewers: IluvRiver, JH2050, choiyunha"
          echo "🚀 Ready to proceed with deployment!"

      - name: ⏳ Manual Approval Required
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "#ff9500",
                "title": "⏳ Manual Approval Required for Deployment",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "🔍 SonarQube analysis completed - Waiting for approval",
                    "short": false
                  },
                  {
                    "title": "👥 Reviewers",
                    "value": "@IluvRiver @JH2050 @choiyunha",
                    "short": false
                  },
                  {
                    "title": "🔗 Review & Approve",
                    "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here to approve>",
                    "short": false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-and-deploy:
    name: 🚀 Build and Deploy
    needs: [sonarqube-analysis, manual-approval]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 🚀 Deployment Approved
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "#36a64f",
                "title": "🚀 Deployment Approved - Starting Build Process",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "✅ Manual approval received\\n🏗️ Starting Docker image build...",
                    "short": false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
        
      - name: 🔍 Detect Changed Services ONLY
        id: detect-services
        run: |
          ALL_SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          echo "🔍 STRICT MODE: Building ONLY services with direct code changes"
          echo ""
          
          # 변경 파일 감지
          CHANGED_FILES=""
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "📋 Comparing HEAD with HEAD~1"
          else
            CHANGED_FILES=$(git show --name-only --format="" HEAD)
            echo "📋 First commit - analyzing current commit"
          fi
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "📄 All changed files:"
            echo "$CHANGED_FILES"
            echo ""
            echo "🔍 Checking each service for changes..."
            
            # 각 서비스별로 정확한 경로 매칭 - 매우 엄격하게
            for SERVICE in "${ALL_SERVICES[@]}"; do
              SERVICE_CHANGED=false
              
              # 해당 서비스 디렉토리 내의 코드 파일만 체크
              while IFS= read -r file; do
                if [[ "$file" =~ ^backend/$SERVICE/.*\.(java|gradle|Dockerfile)$ ]]; then
                  echo "    ✅ Code change detected: $file"
                  SERVICE_CHANGED=true
                  break
                fi
              done <<< "$CHANGED_FILES"
              
              if [ "$SERVICE_CHANGED" = true ]; then
                echo "✅ $SERVICE: WILL BUILD (code changes found)"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⚪ $SERVICE: SKIP (no code changes)"
              fi
            done
            
            BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
            
            echo ""
            echo "📊 Analysis Summary:"
            echo "   Total changed files: $(echo "$CHANGED_FILES" | wc -l)"
            echo "   Backend files changed: $(echo "$CHANGED_FILES" | grep "^backend/" | wc -l)"
            echo "   Services with code changes: $(echo $BUILD_SERVICES | wc -w)"
            
            # 백엔드 파일 변경이 있지만 서비스 코드 변경이 없는 경우
            if [ -z "$BUILD_SERVICES" ] && echo "$CHANGED_FILES" | grep -q "^backend/"; then
              echo ""
              echo "📋 Backend files changed but no service code:"
              echo "$CHANGED_FILES" | grep "^backend/" | head -5
              
              # 워크플로우 파일만 변경된 경우
              if echo "$CHANGED_FILES" | grep -q "^.github/workflows/" && [ $(echo "$CHANGED_FILES" | grep -v "^.github/workflows/" | wc -l) -eq 0 ]; then
                echo "⚠️  Only workflow files changed - no service build needed"
              else
                echo "ℹ️  No service-specific code changes detected"
              fi
            fi
            
            # 백엔드와 완전 무관한 변경만 있는 경우
            if [ -z "$BUILD_SERVICES" ] && ! echo "$CHANGED_FILES" | grep -q "^backend/"; then
              echo ""
              echo "ℹ️  No backend-related changes at all:"
              echo "$CHANGED_FILES" | head -3
              echo "⏭️  Skipping entire build process"
            fi
          else
            echo "⚠️  No changed files detected"
          fi
          
          if [ -z "$BUILD_SERVICES" ]; then
            echo ""
            echo "🎯 FINAL RESULT: No services need building"
            echo "build_services=" >> $GITHUB_ENV
            echo "skip_build=true" >> $GITHUB_ENV
            exit 0
          fi
          
          echo ""
          echo "🎯 FINAL RESULT: Building ONLY these services:"
          for SERVICE in $BUILD_SERVICES; do
            echo "  🔨 $SERVICE"
          done
          echo ""
          echo "⚠️  NOTE: Will NOT build: $(echo "${ALL_SERVICES[@]}" | tr ' ' '\n' | grep -v -F "$(echo $BUILD_SERVICES | tr ' ' '\n')" | tr '\n' ' ')"
          echo ""
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_ENV
          echo "skip_build=false" >> $GITHUB_ENV
          
          # Slack용 포맷팅
          FORMATTED_SERVICES=$(echo $BUILD_SERVICES | sed 's/ /, /g')
          echo "formatted_services=$FORMATTED_SERVICES" >> $GITHUB_ENV
          
      - name: Build Docker Images
        if: env.skip_build != 'true' && env.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BUILD_NUMBER="${{ github.run_number }}"
          BUILT_SERVICES=""
          
          echo "🏗️ Building Docker images for selected services..."
          echo ""
          
          for SERVICE in ${{ env.build_services }}; do
            echo "==================== $SERVICE ===================="
            
            # 기존 버전 확인
            EXISTING_VERSIONS=$(aws ecr describe-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null | \
              tr '\t' '\n' | \
              grep "^${SERVICE}-v[0-9]*$" | \
              sed "s/${SERVICE}-v//" | \
              sort -n || echo "")
            
            if [ -z "$EXISTING_VERSIONS" ]; then
              NEXT_VERSION=1
              echo "🆕 First version: v1"
            else
              LATEST_VERSION=$(echo "$EXISTING_VERSIONS" | tail -1)
              NEXT_VERSION=$((LATEST_VERSION + 1))
              echo "📈 v$LATEST_VERSION → v$NEXT_VERSION"
            fi
            
            VERSION_TAG="${SERVICE}-v${NEXT_VERSION}"
            LATEST_TAG="${SERVICE}-latest"
            TEMP_TAG="${SERVICE}-temp-${TIMESTAMP}-${BUILD_NUMBER}"
            
            VERSION_URI="$ECR_REGISTRY/kubox:$VERSION_TAG"
            LATEST_URI="$ECR_REGISTRY/kubox:$LATEST_TAG"
            
            echo "🏗️  Building: $VERSION_TAG"
            
            cd backend/$SERVICE
            
            if docker build --build-arg VERSION="$VERSION_TAG" -t "$TEMP_TAG" .; then
              echo "✅ Build successful"
              
              docker tag "$TEMP_TAG" "$VERSION_URI"
              if docker push "$VERSION_URI"; then
                echo "✅ Pushed: $VERSION_TAG"
                
                docker tag "$TEMP_TAG" "$LATEST_URI"
                docker push "$LATEST_URI"
                echo "✅ Updated: $LATEST_TAG"
                
                BUILT_SERVICES="$BUILT_SERVICES $SERVICE:$VERSION_TAG"
              else
                echo "❌ Failed to push: $VERSION_TAG"
              fi
              
              docker rmi "$TEMP_TAG" 2>/dev/null || true
            else
              echo "❌ Build failed: $SERVICE"
            fi
            
            cd ../..
            echo ""
          done

          echo "built_services=$BUILT_SERVICES" >> $GITHUB_ENV
          
          if [ -n "$BUILT_SERVICES" ]; then
            FORMATTED_BUILT=$(echo "$BUILT_SERVICES" | sed 's/ /\\n• /g' | sed 's/:/: /g')
            echo "formatted_built_services=• $FORMATTED_BUILT" >> $GITHUB_ENV
          fi

      - name: 🚀 Docker Build Complete
        if: success() && env.skip_build != 'true' && env.built_services != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "#36a64f",
                "title": "🚀 Docker Images Successfully Built and Pushed to ECR",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "🎯 Built Services",
                    "value": "${{ env.formatted_services }}",
                    "short": false
                  },
                  {
                    "title": "📦 New Images",
                    "value": "${{ env.formatted_built_services }}",
                    "short": false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ℹ️ No Build Required
        if: env.skip_build == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "#36a64f",
                "title": "ℹ️ No Docker Build Required",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Result",
                    "value": "✅ SonarQube completed\\n⚪ No backend service changes\\n⏭️ Skipped Docker build",
                    "short": false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  final-notification:
    name: 📊 Final Status
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [sonarqube-analysis, manual-approval, build-and-deploy]
    steps:
      - name: 🎉 Workflow Complete
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ needs.build-and-deploy.result == 'success' && '#36a64f' || '#d73a49' }}",
                "title": "${{ needs.build-and-deploy.result == 'success' && '🎉 Deployment Workflow Completed' || '❌ Deployment Workflow Failed' }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Summary",
                    "value": "• SonarQube: ${{ needs.sonarqube-analysis.result == 'success' && '✅' || '❌' }}\\n• Approval: ${{ needs.manual-approval.result == 'success' && '✅' || '❌' }}\\n• Build: ${{ needs.build-and-deploy.result == 'success' && '✅' || '❌' }}",
                    "short": false
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
