name: Fixed Incremental Versioning

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes
        id: analyze
        run: |
          echo "🔍 변경 분석..."
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          BUILD_SERVICES=""
          
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            for SERVICE in "${SERVICES[@]}"; do
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 변경됨"
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "⏭️  $SERVICE: 변경 없음"
              fi
            done
          fi
          
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "최종 빌드 대상: [$BUILD_SERVICES]"
        
      - name: Build incremental versions safely
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🚀 안전한 증분 버전 빌드..."
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "🔨 처리 중: $SERVICE → $SERVICE_TAG"
            
            # === 1. 기존 버전 확인 ===
            echo "📋 기존 버전 조회..."
            
            # 간단하고 안전한 방법으로 기존 태그 확인
            EXISTING_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text 2>/dev/null | tr '\t' '\n' | grep "^$SERVICE_TAG-v[0-9]*$" | sort -V || echo "")
            
            if [ -z "$EXISTING_TAGS" ]; then
              NEXT_VERSION=1
              echo "🆕 첫 번째 버전: v1"
            else
              # 가장 높은 버전 번호 추출
              HIGHEST_TAG=$(echo "$EXISTING_TAGS" | tail -1)
              CURRENT_VERSION=$(echo "$HIGHEST_TAG" | sed "s/$SERVICE_TAG-v//")
              NEXT_VERSION=$((CURRENT_VERSION + 1))
              
              echo "📦 기존 버전들:"
              echo "$EXISTING_TAGS" | sed 's/^/  ✅ /'
              echo "🆕 새 버전: v$NEXT_VERSION"
            fi
            
            # === 2. 임시 빌드 디렉토리 생성 ===
            TEMP_DIR="temp-build-$SERVICE_TAG-$(date +%s)"
            mkdir -p "$TEMP_DIR"
            
            # 원본 소스 복사
            cp -r backend/$SERVICE/* "$TEMP_DIR/"
            
            # === 3. 고유성 보장 파일 추가 ===
            UNIQUE_ID="v$NEXT_VERSION-${{ github.run_number }}-$(date +%s)"
            echo "🔑 고유 ID: $UNIQUE_ID"
            
            # 고유 메타데이터 파일 생성
            mkdir -p "$TEMP_DIR/build-meta"
            cat > "$TEMP_DIR/build-meta/info.json" << EOF
          {
            "version": "v$NEXT_VERSION",
            "buildId": "$UNIQUE_ID",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "runNumber": "${{ github.run_number }}",
            "service": "$SERVICE_TAG"
          }
          EOF
            
            # === 4. 새 Dockerfile 생성 (원본 보존) ===
            cat "$TEMP_DIR/Dockerfile" > "$TEMP_DIR/Dockerfile.new"
            cat >> "$TEMP_DIR/Dockerfile.new" << EOF
          
          # === Build Uniqueness Layer ===
          COPY build-meta/info.json /app/build-info.json
          RUN echo "Unique Build: $UNIQUE_ID" > /app/build-marker.txt
          RUN date > /app/build-timestamp.txt
          EOF
            
            # === 5. 새 버전 빌드 ===
            NEW_VERSION_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            
            echo "🏗️  빌드: $NEW_VERSION_TAG"
            
            if docker build -f "$TEMP_DIR/Dockerfile.new" -t "$NEW_VERSION_TAG" "$TEMP_DIR"; then
              echo "✅ 빌드 성공"
              
              # 이미지 정보 확인
              IMAGE_ID=$(docker images --format "table {{.ID}}" --no-trunc | grep "$(docker image inspect "$NEW_VERSION_TAG" --format='{{.Id}}' | cut -c8-19)" | head -1)
              echo "🆔 이미지 ID: ${IMAGE_ID:0:12}..."
              
              # === 6. 새 버전 푸시 ===
              echo "📤 푸시: $SERVICE_TAG-v$NEXT_VERSION"
              if docker push "$NEW_VERSION_TAG"; then
                echo "✅ 새 버전 푸시 성공"
                
                # === 7. latest 태그 업데이트 ===
                LATEST_TAG="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
                echo "🏷️  latest 태그 업데이트..."
                
                docker tag "$NEW_VERSION_TAG" "$LATEST_TAG"
                if docker push "$LATEST_TAG"; then
                  echo "✅ latest 업데이트 완료"
                else
                  echo "⚠️  latest 업데이트 실패 (무시)"
                fi
              else
                echo "❌ 새 버전 푸시 실패"
              fi
            else
              echo "❌ 빌드 실패"
            fi
            
            # === 8. 정리 ===
            rm -rf "$TEMP_DIR"
            
            echo "🎉 $SERVICE_TAG-v$NEXT_VERSION 처리 완료"
          done
          
      - name: Verify results
        if: steps.analyze.outputs.build_services != ''
        env:
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          echo ""
          echo "🔍 결과 확인..."
          
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            echo ""
            echo "📊 $SERVICE_TAG 최종 상태:"
            
            # 모든 버전 태그 나열
            echo "📦 모든 버전:"
            aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[].imageTags[]" \
              --output text | tr '\t' '\n' | grep "^$SERVICE_TAG-v[0-9]*$" | sort -V | sed 's/^/  ✅ /' || echo "  없음"
            
            echo "🏷️  latest 상태:"
            aws ecr describe-images \
              --repository-name kubox \
              --image-ids imageTag="$SERVICE_TAG-latest" \
              --query "imageDetails[0].imageTags[0]" \
              --output text 2>/dev/null | sed 's/^/  🎯 /' || echo "  없음"
          done
          
      - name: Final summary
        run: |
          echo ""
          echo "🎯 증분 버전 빌드 완료!"
          echo "📈 처리된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo ""
          echo "✅ 결과:"
          echo "  📦 기존 버전들: 모두 보존됨"
          echo "  🆕 새 버전들: 순차적 증가"
          echo "  🏷️  latest: 최신 버전으로 업데이트"
          echo ""
          echo "🔒 이제 ECR에서 user-v1, user-v2, user-v3... 모두 확인 가능!"
