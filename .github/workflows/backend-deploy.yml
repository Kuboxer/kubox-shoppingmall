name: Build and Push Backend Services

# 추가 코멘트: 2025-08-07 ECR 이미지 빌드 및 푸시

on:
  workflow_dispatch:   # 수동 실행 가능
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'  # workflow 파일 변경시도 실행

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 이전 커밋과 비교하기 위해
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Get short commit hash
        id: vars
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
        
      - name: Check changed services
        id: changes
        run: |
          echo "🔍 변경된 서비스 확인 중..."
          
          # 서비스 목록
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          CHANGED_SERVICES=""
          
          for SERVICE in "${SERVICES[@]}"; do
            # 각 서비스 폴더의 변경사항 확인
            if git diff --name-only HEAD~1 HEAD | grep -q "^backend/$SERVICE/"; then
              echo "📝 $SERVICE 변경됨"
              CHANGED_SERVICES="$CHANGED_SERVICES $SERVICE"
            else
              echo "⏭️  $SERVICE 변경사항 없음"
            fi
          done
          
          # workflow 파일이 변경되었다면 모든 서비스 빌드
          if git diff --name-only HEAD~1 HEAD | grep -q "^.github/workflows/backend-deploy.yml"; then
            echo "🔧 Workflow 파일 변경됨 - 모든 서비스 빌드"
            CHANGED_SERVICES="user-service product-service order-service payment-service cart-service"
          fi
          
          # trigger.txt 파일 변경은 무시 (테스트용)
          if git diff --name-only HEAD~1 HEAD | grep -q "^backend/trigger.txt$"; then
            echo "🧪 트리거 파일만 변경됨 - 빌드 스킵"
            CHANGED_SERVICES=""
          fi
          
          echo "changed_services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
          echo "✅ 변경된 서비스: $CHANGED_SERVICES"
        
      - name: Determine next version for changed services only
        id: version
        if: steps.changes.outputs.changed_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          CHANGED_SERVICES: ${{ steps.changes.outputs.changed_services }}
        run: |
          # 서비스 매핑
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🔍 변경된 서비스들의 버전 확인..."
          
          for SERVICE_DIR in $CHANGED_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE_DIR]}"
            
            echo "🔍 Checking existing versions for $SERVICE_TAG..."
            
            # ECR에서 기존 태그 확인
            EXISTING_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            # 최고 버전 찾기
            MAX_VERSION=0
            if [[ -n "$EXISTING_TAGS" ]]; then
              for TAG in $EXISTING_TAGS; do
                if [[ $TAG =~ ^$SERVICE_TAG-v([0-9]+)$ ]]; then
                  VERSION_NUM=${BASH_REMATCH[1]}
                  if (( VERSION_NUM > MAX_VERSION )); then
                    MAX_VERSION=$VERSION_NUM
                  fi
                fi
              done
            fi
            
            # 다음 버전 계산
            NEXT_VERSION=$((MAX_VERSION + 1))
            
            echo "📦 $SERVICE_TAG: v$MAX_VERSION → v$NEXT_VERSION"
            echo "${SERVICE_TAG}_VERSION=v$NEXT_VERSION" >> $GITHUB_OUTPUT
          done
        
      - name: Build and push Docker images for changed services only
        if: steps.changes.outputs.changed_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          CHANGED_SERVICES: ${{ steps.changes.outputs.changed_services }}
          USER_VERSION: ${{ steps.version.outputs.user_VERSION }}
          PROD_VERSION: ${{ steps.version.outputs.prod_VERSION }}
          ORDER_VERSION: ${{ steps.version.outputs.order_VERSION }}
          PAY_VERSION: ${{ steps.version.outputs.pay_VERSION }}
          CART_VERSION: ${{ steps.version.outputs.cart_VERSION }}
        run: |
          # 서비스 매핑
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          declare -A VERSIONS
          VERSIONS["user"]="$USER_VERSION"
          VERSIONS["prod"]="$PROD_VERSION"
          VERSIONS["order"]="$ORDER_VERSION"
          VERSIONS["pay"]="$PAY_VERSION"
          VERSIONS["cart"]="$CART_VERSION"
          
          echo "🚀 변경된 서비스들만 빌드 시작..."
          
          for SERVICE_DIR in $CHANGED_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE_DIR]}"
            VERSION="${VERSIONS[$SERVICE_TAG]}"
            CONTEXT="backend/$SERVICE_DIR"
            
            # 버전별 이미지 태그 
            VERSIONED_IMAGE="$ECR_REGISTRY/kubox:$SERVICE_TAG-$VERSION"
            # latest 태그
            LATEST_IMAGE="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
            
            echo "🔨 Building $SERVICE_DIR (코드 변경됨)"
            echo "   📦 Versioned: $VERSIONED_IMAGE"
            echo "   🏷️  Latest: $LATEST_IMAGE"
            
            # Docker 이미지 빌드
            docker build -t $VERSIONED_IMAGE $CONTEXT
            
            # ECR에 푸시
            docker push $VERSIONED_IMAGE
            
            # latest 태그 생성 및 푸시
            docker tag $VERSIONED_IMAGE $LATEST_IMAGE
            docker push $LATEST_IMAGE
            
            echo "✅ $SERVICE_DIR → $SERVICE_TAG-$VERSION completed"
            echo "---"
          done
          
          echo "🎉 변경된 서비스들 빌드 완료!"
          
      - name: No changes detected
        if: steps.changes.outputs.changed_services == ''
        run: |
          echo "ℹ️  변경된 백엔드 서비스가 없습니다."
          echo "💡 이미지 빌드를 건너뜁니다."
