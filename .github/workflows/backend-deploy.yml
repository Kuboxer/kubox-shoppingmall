name: Smart Build - Only Build When Code Changes

on:
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force rebuild all services'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Analyze changes and determine build strategy
        id: analyze
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "🔍 변경 분석 및 빌드 전략 결정..."
          
          # 서비스 매핑
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          SERVICES=("user-service" "product-service" "order-service" "payment-service" "cart-service")
          
          BUILD_SERVICES=""
          RETAG_SERVICES=""
          
          # 강제 빌드 모드 체크
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            echo "🔧 강제 빌드 모드 - 모든 서비스 빌드"
            BUILD_SERVICES="user-service product-service order-service payment-service cart-service"
          else
            # 변경된 서비스 확인
            PREV_COMMIT="${{ github.event.before }}"
            CURR_COMMIT="${{ github.sha }}"
            
            echo "📊 커밋 비교: $PREV_COMMIT...$CURR_COMMIT"
            
            for SERVICE in "${SERVICES[@]}"; do
              SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
              
              # 해당 서비스의 실제 코드 변경 확인 (trigger.txt 제외)
              CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $CURR_COMMIT | grep "^backend/$SERVICE/" | grep -v "trigger.txt" || true)
              
              if [ -n "$CHANGED_FILES" ]; then
                echo "🔨 $SERVICE: 코드 변경됨 → 새 빌드 필요"
                echo "$CHANGED_FILES" | sed 's/^/  📄 /'
                BUILD_SERVICES="$BUILD_SERVICES $SERVICE"
              else
                echo "🏷️  $SERVICE: 변경 없음 → 기존 이미지 재사용"
                RETAG_SERVICES="$RETAG_SERVICES $SERVICE"
              fi
            done
          fi
          
          # 공백 제거
          BUILD_SERVICES=$(echo $BUILD_SERVICES | xargs)
          RETAG_SERVICES=$(echo $RETAG_SERVICES | xargs)
          
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "retag_services=$RETAG_SERVICES" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📋 빌드 전략 요약:"
          echo "🔨 새로 빌드할 서비스: [$BUILD_SERVICES]"
          echo "🏷️  태그만 변경할 서비스: [$RETAG_SERVICES]"
        
      - name: Build changed services
        if: steps.analyze.outputs.build_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BUILD_SERVICES: ${{ steps.analyze.outputs.build_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🚀 코드가 변경된 서비스들만 새로 빌드..."
          
          for SERVICE in $BUILD_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            
            # 현재 최고 버전 확인
            EXISTING_TAGS=$(aws ecr list-images \
              --repository-name kubox \
              --query "imageDetails[?contains(imageTags, '$SERVICE_TAG-v')].imageTags[]" \
              --output text 2>/dev/null || echo "")
            
            MAX_VERSION=0
            if [[ -n "$EXISTING_TAGS" ]]; then
              for TAG in $EXISTING_TAGS; do
                if [[ $TAG =~ ^$SERVICE_TAG-v([0-9]+)$ ]]; then
                  VERSION_NUM=${BASH_REMATCH[1]}
                  if (( VERSION_NUM > MAX_VERSION )); then
                    MAX_VERSION=$VERSION_NUM
                  fi
                fi
              done
            fi
            
            NEXT_VERSION=$((MAX_VERSION + 1))
            
            VERSIONED_IMAGE="$ECR_REGISTRY/kubox:$SERVICE_TAG-v$NEXT_VERSION"
            LATEST_IMAGE="$ECR_REGISTRY/kubox:$SERVICE_TAG-latest"
            
            echo "🔨 Building $SERVICE → $SERVICE_TAG-v$NEXT_VERSION (실제 코드 변경)"
            
            # Docker 빌드 및 푸시
            docker build -t $VERSIONED_IMAGE backend/$SERVICE/
            docker push $VERSIONED_IMAGE
            
            # latest 태그 업데이트
            docker tag $VERSIONED_IMAGE $LATEST_IMAGE
            docker push $LATEST_IMAGE
            
            echo "✅ $SERVICE → $SERVICE_TAG-v$NEXT_VERSION 완료"
          done
          
      - name: Retag unchanged services
        if: steps.analyze.outputs.retag_services != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          RETAG_SERVICES: ${{ steps.analyze.outputs.retag_services }}
        run: |
          declare -A SERVICE_TAGS
          SERVICE_TAGS["user-service"]="user"
          SERVICE_TAGS["product-service"]="prod" 
          SERVICE_TAGS["order-service"]="order"
          SERVICE_TAGS["payment-service"]="pay"
          SERVICE_TAGS["cart-service"]="cart"
          
          echo "🏷️  변경되지 않은 서비스들은 기존 이미지 재사용..."
          
          for SERVICE in $RETAG_SERVICES; do
            SERVICE_TAG="${SERVICE_TAGS[$SERVICE]}"
            
            # 기존 latest 이미지 확인
            LATEST_EXISTS=$(aws ecr describe-images \
              --repository-name kubox \
              --image-ids imageTag=$SERVICE_TAG-latest \
              --query 'imageDetails[0].imageTags' \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$LATEST_EXISTS" ]; then
              echo "✅ $SERVICE: 기존 $SERVICE_TAG-latest 이미지 유지 (변경사항 없음)"
            else
              echo "⚠️  $SERVICE: latest 태그가 없습니다"
            fi
          done
          
      - name: Summary
        run: |
          echo "🎯 빌드 완료 요약:"
          echo "🔨 새로 빌드된 서비스: ${{ steps.analyze.outputs.build_services }}"
          echo "🏷️  재사용된 서비스: ${{ steps.analyze.outputs.retag_services }}"
          echo ""
          echo "💡 코드 변경이 있는 서비스만 새 이미지를 생성했습니다."
          echo "💡 변경이 없는 서비스는 기존 이미지를 그대로 사용합니다."
